(self.webpackChunk_ha10id_maplibre_gl_export=self.webpackChunk_ha10id_maplibre_gl_export||[]).push([[117],{9662:(t,e,r)=>{var i=r(614),n=r(6330);t.exports=function(t){if(i(t))return t;throw TypeError(n(t)+" is not a function")}},9483:(t,e,r)=>{var i=r(4411),n=r(6330);t.exports=function(t){if(i(t))return t;throw TypeError(n(t)+" is not a constructor")}},6077:(t,e,r)=>{var i=r(614);t.exports=function(t){if("object"==typeof t||i(t))return t;throw TypeError("Can't set "+String(t)+" as a prototype")}},1223:(t,e,r)=>{var i=r(5112),n=r(30),a=r(3070),s=i("unscopables"),o=Array.prototype;null==o[s]&&a.f(o,s,{configurable:!0,value:n(null)}),t.exports=function(t){o[s][t]=!0}},1530:(t,e,r)=>{"use strict";var i=r(8710).charAt;t.exports=function(t,e,r){return e+(r?i(t,e).length:1)}},5787:t=>{t.exports=function(t,e,r){if(t instanceof e)return t;throw TypeError("Incorrect "+(r?r+" ":"")+"invocation")}},9670:(t,e,r)=>{var i=r(111);t.exports=function(t){if(i(t))return t;throw TypeError(String(t)+" is not an object")}},5367:(t,e,r)=>{var i=r(5656),n=r(7466),a=r(1400),s=function(t){return function(e,r,s){var o,h=i(e),u=n(h.length),l=a(s,u);if(t&&r!=r){for(;u>l;)if((o=h[l++])!=o)return!0}else for(;u>l;l++)if((t||l in h)&&h[l]===r)return t||l||0;return!t&&-1}};t.exports={includes:s(!0),indexOf:s(!1)}},9341:(t,e,r)=>{"use strict";var i=r(7293);t.exports=function(t,e){var r=[][t];return!!r&&i((function(){r.call(null,e||function(){throw 1},1)}))}},3671:(t,e,r)=>{var i=r(9662),n=r(7908),a=r(8361),s=r(7466),o=function(t){return function(e,r,o,h){i(r);var u=n(e),l=a(u),c=s(u.length),g=t?c-1:0,f=t?-1:1;if(o<2)for(;;){if(g in l){h=l[g],g+=f;break}if(g+=f,t?g<0:c<=g)throw TypeError("Reduce of empty array with no initial value")}for(;t?g>=0:c>g;g+=f)g in l&&(h=r(h,l[g],g,u));return h}};t.exports={left:o(!1),right:o(!0)}},7072:(t,e,r)=>{var i=r(5112)("iterator"),n=!1;try{var a=0,s={next:function(){return{done:!!a++}},return:function(){n=!0}};s[i]=function(){return this},Array.from(s,(function(){throw 2}))}catch(t){}t.exports=function(t,e){if(!e&&!n)return!1;var r=!1;try{var a={};a[i]=function(){return{next:function(){return{done:r=!0}}}},t(a)}catch(t){}return r}},4326:t=>{var e={}.toString;t.exports=function(t){return e.call(t).slice(8,-1)}},648:(t,e,r)=>{var i=r(1694),n=r(614),a=r(4326),s=r(5112)("toStringTag"),o="Arguments"==a(function(){return arguments}());t.exports=i?a:function(t){var e,r,i;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(r=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),s))?r:o?a(e):"Object"==(i=a(e))&&n(e.callee)?"Arguments":i}},9920:(t,e,r)=>{var i=r(6656),n=r(3887),a=r(1236),s=r(3070);t.exports=function(t,e){for(var r=n(e),o=s.f,h=a.f,u=0;u<r.length;u++){var l=r[u];i(t,l)||o(t,l,h(e,l))}}},4964:(t,e,r)=>{var i=r(5112)("match");t.exports=function(t){var e=/./;try{"/./"[t](e)}catch(r){try{return e[i]=!1,"/./"[t](e)}catch(t){}}return!1}},8544:(t,e,r)=>{var i=r(7293);t.exports=!i((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}))},4994:(t,e,r)=>{"use strict";var i=r(3383).IteratorPrototype,n=r(30),a=r(9114),s=r(8003),o=r(7497),h=function(){return this};t.exports=function(t,e,r){var u=e+" Iterator";return t.prototype=n(i,{next:a(1,r)}),s(t,u,!1,!0),o[u]=h,t}},8880:(t,e,r)=>{var i=r(9781),n=r(3070),a=r(9114);t.exports=i?function(t,e,r){return n.f(t,e,a(1,r))}:function(t,e,r){return t[e]=r,t}},9114:t=>{t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},654:(t,e,r)=>{"use strict";var i=r(2109),n=r(1913),a=r(6530),s=r(614),o=r(4994),h=r(9518),u=r(7674),l=r(8003),c=r(8880),g=r(1320),f=r(5112),p=r(7497),d=r(3383),v=a.PROPER,y=a.CONFIGURABLE,m=d.IteratorPrototype,x=d.BUGGY_SAFARI_ITERATORS,b=f("iterator"),S="keys",w="values",T="entries",A=function(){return this};t.exports=function(t,e,r,a,f,d,O){o(r,e,a);var P,E,C,M=function(t){if(t===f&&k)return k;if(!x&&t in V)return V[t];switch(t){case S:case w:case T:return function(){return new r(this,t)}}return function(){return new r(this)}},N=e+" Iterator",_=!1,V=t.prototype,R=V[b]||V["@@iterator"]||f&&V[f],k=!x&&R||M(f),I="Array"==e&&V.entries||R;if(I&&(P=h(I.call(new t)))!==Object.prototype&&P.next&&(n||h(P)===m||(u?u(P,m):s(P[b])||g(P,b,A)),l(P,N,!0,!0),n&&(p[N]=A)),v&&f==w&&R&&R.name!==w&&(!n&&y?c(V,"name",w):(_=!0,k=function(){return R.call(this)})),f)if(E={values:M(w),keys:d?k:M(S),entries:M(T)},O)for(C in E)(x||_||!(C in V))&&g(V,C,E[C]);else i({target:e,proto:!0,forced:x||_},E);return n&&!O||V[b]===k||g(V,b,k,{name:f}),p[e]=k,E}},9781:(t,e,r)=>{var i=r(7293);t.exports=!i((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},317:(t,e,r)=>{var i=r(7854),n=r(111),a=i.document,s=n(a)&&n(a.createElement);t.exports=function(t){return s?a.createElement(t):{}}},8324:t=>{t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},8509:(t,e,r)=>{var i=r(317)("span").classList,n=i&&i.constructor&&i.constructor.prototype;t.exports=n===Object.prototype?void 0:n},7871:t=>{t.exports="object"==typeof window},1528:(t,e,r)=>{var i=r(8113),n=r(7854);t.exports=/ipad|iphone|ipod/i.test(i)&&void 0!==n.Pebble},6833:(t,e,r)=>{var i=r(8113);t.exports=/(?:ipad|iphone|ipod).*applewebkit/i.test(i)},5268:(t,e,r)=>{var i=r(4326),n=r(7854);t.exports="process"==i(n.process)},1036:(t,e,r)=>{var i=r(8113);t.exports=/web0s(?!.*chrome)/i.test(i)},8113:(t,e,r)=>{var i=r(5005);t.exports=i("navigator","userAgent")||""},7392:(t,e,r)=>{var i,n,a=r(7854),s=r(8113),o=a.process,h=a.Deno,u=o&&o.versions||h&&h.version,l=u&&u.v8;l?n=(i=l.split("."))[0]<4?1:i[0]+i[1]:s&&(!(i=s.match(/Edge\/(\d+)/))||i[1]>=74)&&(i=s.match(/Chrome\/(\d+)/))&&(n=i[1]),t.exports=n&&+n},748:t=>{t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},2109:(t,e,r)=>{var i=r(7854),n=r(1236).f,a=r(8880),s=r(1320),o=r(3505),h=r(9920),u=r(4705);t.exports=function(t,e){var r,l,c,g,f,p=t.target,d=t.global,v=t.stat;if(r=d?i:v?i[p]||o(p,{}):(i[p]||{}).prototype)for(l in e){if(g=e[l],c=t.noTargetGet?(f=n(r,l))&&f.value:r[l],!u(d?l:p+(v?".":"#")+l,t.forced)&&void 0!==c){if(typeof g==typeof c)continue;h(g,c)}(t.sham||c&&c.sham)&&a(g,"sham",!0),s(r,l,g,t)}}},7293:t=>{t.exports=function(t){try{return!!t()}catch(t){return!0}}},7007:(t,e,r)=>{"use strict";r(4916);var i=r(1320),n=r(2261),a=r(7293),s=r(5112),o=r(8880),h=s("species"),u=RegExp.prototype;t.exports=function(t,e,r,l){var c=s(t),g=!a((function(){var e={};return e[c]=function(){return 7},7!=""[t](e)})),f=g&&!a((function(){var e=!1,r=/a/;return"split"===t&&((r={}).constructor={},r.constructor[h]=function(){return r},r.flags="",r[c]=/./[c]),r.exec=function(){return e=!0,null},r[c](""),!e}));if(!g||!f||r){var p=/./[c],d=e(c,""[t],(function(t,e,r,i,a){var s=e.exec;return s===n||s===u.exec?g&&!a?{done:!0,value:p.call(e,r,i)}:{done:!0,value:t.call(r,e,i)}:{done:!1}}));i(String.prototype,t,d[0]),i(u,c,d[1])}l&&o(u[c],"sham",!0)}},9974:(t,e,r)=>{var i=r(9662);t.exports=function(t,e,r){if(i(t),void 0===e)return t;switch(r){case 0:return function(){return t.call(e)};case 1:return function(r){return t.call(e,r)};case 2:return function(r,i){return t.call(e,r,i)};case 3:return function(r,i,n){return t.call(e,r,i,n)}}return function(){return t.apply(e,arguments)}}},6530:(t,e,r)=>{var i=r(9781),n=r(6656),a=Function.prototype,s=i&&Object.getOwnPropertyDescriptor,o=n(a,"name"),h=o&&"something"===function(){}.name,u=o&&(!i||i&&s(a,"name").configurable);t.exports={EXISTS:o,PROPER:h,CONFIGURABLE:u}},5005:(t,e,r)=>{var i=r(7854),n=r(614),a=function(t){return n(t)?t:void 0};t.exports=function(t,e){return arguments.length<2?a(i[t]):i[t]&&i[t][e]}},1246:(t,e,r)=>{var i=r(648),n=r(8173),a=r(7497),s=r(5112)("iterator");t.exports=function(t){if(null!=t)return n(t,s)||n(t,"@@iterator")||a[i(t)]}},8554:(t,e,r)=>{var i=r(9662),n=r(9670),a=r(1246);t.exports=function(t,e){var r=arguments.length<2?a(t):e;if(i(r))return n(r.call(t));throw TypeError(String(t)+" is not iterable")}},8173:(t,e,r)=>{var i=r(9662);t.exports=function(t,e){var r=t[e];return null==r?void 0:i(r)}},647:(t,e,r)=>{var i=r(7908),n=Math.floor,a="".replace,s=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,o=/\$([$&'`]|\d{1,2})/g;t.exports=function(t,e,r,h,u,l){var c=r+t.length,g=h.length,f=o;return void 0!==u&&(u=i(u),f=s),a.call(l,f,(function(i,a){var s;switch(a.charAt(0)){case"$":return"$";case"&":return t;case"`":return e.slice(0,r);case"'":return e.slice(c);case"<":s=u[a.slice(1,-1)];break;default:var o=+a;if(0===o)return i;if(o>g){var l=n(o/10);return 0===l?i:l<=g?void 0===h[l-1]?a.charAt(1):h[l-1]+a.charAt(1):i}s=h[o-1]}return void 0===s?"":s}))}},7854:(t,e,r)=>{var i=function(t){return t&&t.Math==Math&&t};t.exports=i("object"==typeof globalThis&&globalThis)||i("object"==typeof window&&window)||i("object"==typeof self&&self)||i("object"==typeof r.g&&r.g)||function(){return this}()||Function("return this")()},6656:(t,e,r)=>{var i=r(7908),n={}.hasOwnProperty;t.exports=Object.hasOwn||function(t,e){return n.call(i(t),e)}},3501:t=>{t.exports={}},842:(t,e,r)=>{var i=r(7854);t.exports=function(t,e){var r=i.console;r&&r.error&&(1===arguments.length?r.error(t):r.error(t,e))}},490:(t,e,r)=>{var i=r(5005);t.exports=i("document","documentElement")},4664:(t,e,r)=>{var i=r(9781),n=r(7293),a=r(317);t.exports=!i&&!n((function(){return 7!=Object.defineProperty(a("div"),"a",{get:function(){return 7}}).a}))},8361:(t,e,r)=>{var i=r(7293),n=r(4326),a="".split;t.exports=i((function(){return!Object("z").propertyIsEnumerable(0)}))?function(t){return"String"==n(t)?a.call(t,""):Object(t)}:Object},2788:(t,e,r)=>{var i=r(614),n=r(5465),a=Function.toString;i(n.inspectSource)||(n.inspectSource=function(t){return a.call(t)}),t.exports=n.inspectSource},9909:(t,e,r)=>{var i,n,a,s=r(8536),o=r(7854),h=r(111),u=r(8880),l=r(6656),c=r(5465),g=r(6200),f=r(3501),p="Object already initialized",d=o.WeakMap;if(s||c.state){var v=c.state||(c.state=new d),y=v.get,m=v.has,x=v.set;i=function(t,e){if(m.call(v,t))throw new TypeError(p);return e.facade=t,x.call(v,t,e),e},n=function(t){return y.call(v,t)||{}},a=function(t){return m.call(v,t)}}else{var b=g("state");f[b]=!0,i=function(t,e){if(l(t,b))throw new TypeError(p);return e.facade=t,u(t,b,e),e},n=function(t){return l(t,b)?t[b]:{}},a=function(t){return l(t,b)}}t.exports={set:i,get:n,has:a,enforce:function(t){return a(t)?n(t):i(t,{})},getterFor:function(t){return function(e){var r;if(!h(e)||(r=n(e)).type!==t)throw TypeError("Incompatible receiver, "+t+" required");return r}}}},7659:(t,e,r)=>{var i=r(5112),n=r(7497),a=i("iterator"),s=Array.prototype;t.exports=function(t){return void 0!==t&&(n.Array===t||s[a]===t)}},1349:(t,e,r)=>{var i=r(4326);t.exports=Array.isArray||function(t){return"Array"==i(t)}},614:t=>{t.exports=function(t){return"function"==typeof t}},4411:(t,e,r)=>{var i=r(7293),n=r(614),a=r(648),s=r(5005),o=r(2788),h=[],u=s("Reflect","construct"),l=/^\s*(?:class|function)\b/,c=l.exec,g=!l.exec((function(){})),f=function(t){if(!n(t))return!1;try{return u(Object,h,t),!0}catch(t){return!1}};t.exports=!u||i((function(){var t;return f(f.call)||!f(Object)||!f((function(){t=!0}))||t}))?function(t){if(!n(t))return!1;switch(a(t)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}return g||!!c.call(l,o(t))}:f},4705:(t,e,r)=>{var i=r(7293),n=r(614),a=/#|\.prototype\./,s=function(t,e){var r=h[o(t)];return r==l||r!=u&&(n(e)?i(e):!!e)},o=s.normalize=function(t){return String(t).replace(a,".").toLowerCase()},h=s.data={},u=s.NATIVE="N",l=s.POLYFILL="P";t.exports=s},111:(t,e,r)=>{var i=r(614);t.exports=function(t){return"object"==typeof t?null!==t:i(t)}},1913:t=>{t.exports=!1},7850:(t,e,r)=>{var i=r(111),n=r(4326),a=r(5112)("match");t.exports=function(t){var e;return i(t)&&(void 0!==(e=t[a])?!!e:"RegExp"==n(t))}},2190:(t,e,r)=>{var i=r(614),n=r(5005),a=r(3307);t.exports=a?function(t){return"symbol"==typeof t}:function(t){var e=n("Symbol");return i(e)&&Object(t)instanceof e}},408:(t,e,r)=>{var i=r(9670),n=r(7659),a=r(7466),s=r(9974),o=r(8554),h=r(1246),u=r(9212),l=function(t,e){this.stopped=t,this.result=e};t.exports=function(t,e,r){var c,g,f,p,d,v,y,m=r&&r.that,x=!(!r||!r.AS_ENTRIES),b=!(!r||!r.IS_ITERATOR),S=!(!r||!r.INTERRUPTED),w=s(e,m,1+x+S),T=function(t){return c&&u(c,"normal",t),new l(!0,t)},A=function(t){return x?(i(t),S?w(t[0],t[1],T):w(t[0],t[1])):S?w(t,T):w(t)};if(b)c=t;else{if(!(g=h(t)))throw TypeError(String(t)+" is not iterable");if(n(g)){for(f=0,p=a(t.length);p>f;f++)if((d=A(t[f]))&&d instanceof l)return d;return new l(!1)}c=o(t,g)}for(v=c.next;!(y=v.call(c)).done;){try{d=A(y.value)}catch(t){u(c,"throw",t)}if("object"==typeof d&&d&&d instanceof l)return d}return new l(!1)}},9212:(t,e,r)=>{var i=r(9670),n=r(8173);t.exports=function(t,e,r){var a,s;i(t);try{if(!(a=n(t,"return"))){if("throw"===e)throw r;return r}a=a.call(t)}catch(t){s=!0,a=t}if("throw"===e)throw r;if(s)throw a;return i(a),r}},3383:(t,e,r)=>{"use strict";var i,n,a,s=r(7293),o=r(614),h=r(30),u=r(9518),l=r(1320),c=r(5112),g=r(1913),f=c("iterator"),p=!1;[].keys&&("next"in(a=[].keys())?(n=u(u(a)))!==Object.prototype&&(i=n):p=!0),null==i||s((function(){var t={};return i[f].call(t)!==t}))?i={}:g&&(i=h(i)),o(i[f])||l(i,f,(function(){return this})),t.exports={IteratorPrototype:i,BUGGY_SAFARI_ITERATORS:p}},7497:t=>{t.exports={}},5948:(t,e,r)=>{var i,n,a,s,o,h,u,l,c=r(7854),g=r(1236).f,f=r(261).set,p=r(6833),d=r(1528),v=r(1036),y=r(5268),m=c.MutationObserver||c.WebKitMutationObserver,x=c.document,b=c.process,S=c.Promise,w=g(c,"queueMicrotask"),T=w&&w.value;T||(i=function(){var t,e;for(y&&(t=b.domain)&&t.exit();n;){e=n.fn,n=n.next;try{e()}catch(t){throw n?s():a=void 0,t}}a=void 0,t&&t.enter()},p||y||v||!m||!x?!d&&S&&S.resolve?((u=S.resolve(void 0)).constructor=S,l=u.then,s=function(){l.call(u,i)}):s=y?function(){b.nextTick(i)}:function(){f.call(c,i)}:(o=!0,h=x.createTextNode(""),new m(i).observe(h,{characterData:!0}),s=function(){h.data=o=!o})),t.exports=T||function(t){var e={fn:t,next:void 0};a&&(a.next=e),n||(n=e,s()),a=e}},3366:(t,e,r)=>{var i=r(7854);t.exports=i.Promise},133:(t,e,r)=>{var i=r(7392),n=r(7293);t.exports=!!Object.getOwnPropertySymbols&&!n((function(){var t=Symbol();return!String(t)||!(Object(t)instanceof Symbol)||!Symbol.sham&&i&&i<41}))},8536:(t,e,r)=>{var i=r(7854),n=r(614),a=r(2788),s=i.WeakMap;t.exports=n(s)&&/native code/.test(a(s))},8523:(t,e,r)=>{"use strict";var i=r(9662),n=function(t){var e,r;this.promise=new t((function(t,i){if(void 0!==e||void 0!==r)throw TypeError("Bad Promise constructor");e=t,r=i})),this.resolve=i(e),this.reject=i(r)};t.exports.f=function(t){return new n(t)}},3929:(t,e,r)=>{var i=r(7850);t.exports=function(t){if(i(t))throw TypeError("The method doesn't accept regular expressions");return t}},30:(t,e,r)=>{var i,n=r(9670),a=r(6048),s=r(748),o=r(3501),h=r(490),u=r(317),l=r(6200)("IE_PROTO"),c=function(){},g=function(t){return"<script>"+t+"<\/script>"},f=function(t){t.write(g("")),t.close();var e=t.parentWindow.Object;return t=null,e},p=function(){try{i=new ActiveXObject("htmlfile")}catch(t){}var t,e;p="undefined"!=typeof document?document.domain&&i?f(i):((e=u("iframe")).style.display="none",h.appendChild(e),e.src=String("javascript:"),(t=e.contentWindow.document).open(),t.write(g("document.F=Object")),t.close(),t.F):f(i);for(var r=s.length;r--;)delete p.prototype[s[r]];return p()};o[l]=!0,t.exports=Object.create||function(t,e){var r;return null!==t?(c.prototype=n(t),r=new c,c.prototype=null,r[l]=t):r=p(),void 0===e?r:a(r,e)}},6048:(t,e,r)=>{var i=r(9781),n=r(3070),a=r(9670),s=r(1956);t.exports=i?Object.defineProperties:function(t,e){a(t);for(var r,i=s(e),o=i.length,h=0;o>h;)n.f(t,r=i[h++],e[r]);return t}},3070:(t,e,r)=>{var i=r(9781),n=r(4664),a=r(9670),s=r(4948),o=Object.defineProperty;e.f=i?o:function(t,e,r){if(a(t),e=s(e),a(r),n)try{return o(t,e,r)}catch(t){}if("get"in r||"set"in r)throw TypeError("Accessors not supported");return"value"in r&&(t[e]=r.value),t}},1236:(t,e,r)=>{var i=r(9781),n=r(5296),a=r(9114),s=r(5656),o=r(4948),h=r(6656),u=r(4664),l=Object.getOwnPropertyDescriptor;e.f=i?l:function(t,e){if(t=s(t),e=o(e),u)try{return l(t,e)}catch(t){}if(h(t,e))return a(!n.f.call(t,e),t[e])}},8006:(t,e,r)=>{var i=r(6324),n=r(748).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return i(t,n)}},5181:(t,e)=>{e.f=Object.getOwnPropertySymbols},9518:(t,e,r)=>{var i=r(6656),n=r(614),a=r(7908),s=r(6200),o=r(8544),h=s("IE_PROTO"),u=Object.prototype;t.exports=o?Object.getPrototypeOf:function(t){var e=a(t);if(i(e,h))return e[h];var r=e.constructor;return n(r)&&e instanceof r?r.prototype:e instanceof Object?u:null}},6324:(t,e,r)=>{var i=r(6656),n=r(5656),a=r(5367).indexOf,s=r(3501);t.exports=function(t,e){var r,o=n(t),h=0,u=[];for(r in o)!i(s,r)&&i(o,r)&&u.push(r);for(;e.length>h;)i(o,r=e[h++])&&(~a(u,r)||u.push(r));return u}},1956:(t,e,r)=>{var i=r(6324),n=r(748);t.exports=Object.keys||function(t){return i(t,n)}},5296:(t,e)=>{"use strict";var r={}.propertyIsEnumerable,i=Object.getOwnPropertyDescriptor,n=i&&!r.call({1:2},1);e.f=n?function(t){var e=i(this,t);return!!e&&e.enumerable}:r},7674:(t,e,r)=>{var i=r(9670),n=r(6077);t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var t,e=!1,r={};try{(t=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(r,[]),e=r instanceof Array}catch(t){}return function(r,a){return i(r),n(a),e?t.call(r,a):r.__proto__=a,r}}():void 0)},2140:(t,e,r)=>{var i=r(614),n=r(111);t.exports=function(t,e){var r,a;if("string"===e&&i(r=t.toString)&&!n(a=r.call(t)))return a;if(i(r=t.valueOf)&&!n(a=r.call(t)))return a;if("string"!==e&&i(r=t.toString)&&!n(a=r.call(t)))return a;throw TypeError("Can't convert object to primitive value")}},3887:(t,e,r)=>{var i=r(5005),n=r(8006),a=r(5181),s=r(9670);t.exports=i("Reflect","ownKeys")||function(t){var e=n.f(s(t)),r=a.f;return r?e.concat(r(t)):e}},2534:t=>{t.exports=function(t){try{return{error:!1,value:t()}}catch(t){return{error:!0,value:t}}}},9478:(t,e,r)=>{var i=r(9670),n=r(111),a=r(8523);t.exports=function(t,e){if(i(t),n(e)&&e.constructor===t)return e;var r=a.f(t);return(0,r.resolve)(e),r.promise}},2248:(t,e,r)=>{var i=r(1320);t.exports=function(t,e,r){for(var n in e)i(t,n,e[n],r);return t}},1320:(t,e,r)=>{var i=r(7854),n=r(614),a=r(6656),s=r(8880),o=r(3505),h=r(2788),u=r(9909),l=r(6530).CONFIGURABLE,c=u.get,g=u.enforce,f=String(String).split("String");(t.exports=function(t,e,r,h){var u,c=!!h&&!!h.unsafe,p=!!h&&!!h.enumerable,d=!!h&&!!h.noTargetGet,v=h&&void 0!==h.name?h.name:e;n(r)&&("Symbol("===String(v).slice(0,7)&&(v="["+String(v).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),(!a(r,"name")||l&&r.name!==v)&&s(r,"name",v),(u=g(r)).source||(u.source=f.join("string"==typeof v?v:""))),t!==i?(c?!d&&t[e]&&(p=!0):delete t[e],p?t[e]=r:s(t,e,r)):p?t[e]=r:o(e,r)})(Function.prototype,"toString",(function(){return n(this)&&c(this).source||h(this)}))},7651:(t,e,r)=>{var i=r(9670),n=r(614),a=r(4326),s=r(2261);t.exports=function(t,e){var r=t.exec;if(n(r)){var o=r.call(t,e);return null!==o&&i(o),o}if("RegExp"===a(t))return s.call(t,e);throw TypeError("RegExp#exec called on incompatible receiver")}},2261:(t,e,r)=>{"use strict";var i,n,a=r(1340),s=r(7066),o=r(2999),h=r(2309),u=r(30),l=r(9909).get,c=r(9441),g=r(7168),f=RegExp.prototype.exec,p=h("native-string-replace",String.prototype.replace),d=f,v=(i=/a/,n=/b*/g,f.call(i,"a"),f.call(n,"a"),0!==i.lastIndex||0!==n.lastIndex),y=o.UNSUPPORTED_Y||o.BROKEN_CARET,m=void 0!==/()??/.exec("")[1];(v||m||y||c||g)&&(d=function(t){var e,r,i,n,o,h,c,g=this,x=l(g),b=a(t),S=x.raw;if(S)return S.lastIndex=g.lastIndex,e=d.call(S,b),g.lastIndex=S.lastIndex,e;var w=x.groups,T=y&&g.sticky,A=s.call(g),O=g.source,P=0,E=b;if(T&&(-1===(A=A.replace("y","")).indexOf("g")&&(A+="g"),E=b.slice(g.lastIndex),g.lastIndex>0&&(!g.multiline||g.multiline&&"\n"!==b.charAt(g.lastIndex-1))&&(O="(?: "+O+")",E=" "+E,P++),r=new RegExp("^(?:"+O+")",A)),m&&(r=new RegExp("^"+O+"$(?!\\s)",A)),v&&(i=g.lastIndex),n=f.call(T?r:g,E),T?n?(n.input=n.input.slice(P),n[0]=n[0].slice(P),n.index=g.lastIndex,g.lastIndex+=n[0].length):g.lastIndex=0:v&&n&&(g.lastIndex=g.global?n.index+n[0].length:i),m&&n&&n.length>1&&p.call(n[0],r,(function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(n[o]=void 0)})),n&&w)for(n.groups=h=u(null),o=0;o<w.length;o++)h[(c=w[o])[0]]=n[c[1]];return n}),t.exports=d},7066:(t,e,r)=>{"use strict";var i=r(9670);t.exports=function(){var t=i(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.dotAll&&(e+="s"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},2999:(t,e,r)=>{var i=r(7293),n=r(7854).RegExp;e.UNSUPPORTED_Y=i((function(){var t=n("a","y");return t.lastIndex=2,null!=t.exec("abcd")})),e.BROKEN_CARET=i((function(){var t=n("^r","gy");return t.lastIndex=2,null!=t.exec("str")}))},9441:(t,e,r)=>{var i=r(7293),n=r(7854).RegExp;t.exports=i((function(){var t=n(".","s");return!(t.dotAll&&t.exec("\n")&&"s"===t.flags)}))},7168:(t,e,r)=>{var i=r(7293),n=r(7854).RegExp;t.exports=i((function(){var t=n("(?<a>b)","g");return"b"!==t.exec("b").groups.a||"bc"!=="b".replace(t,"$<a>c")}))},4488:t=>{t.exports=function(t){if(null==t)throw TypeError("Can't call method on "+t);return t}},3505:(t,e,r)=>{var i=r(7854);t.exports=function(t,e){try{Object.defineProperty(i,t,{value:e,configurable:!0,writable:!0})}catch(r){i[t]=e}return e}},6340:(t,e,r)=>{"use strict";var i=r(5005),n=r(3070),a=r(5112),s=r(9781),o=a("species");t.exports=function(t){var e=i(t),r=n.f;s&&e&&!e[o]&&r(e,o,{configurable:!0,get:function(){return this}})}},8003:(t,e,r)=>{var i=r(3070).f,n=r(6656),a=r(5112)("toStringTag");t.exports=function(t,e,r){t&&!n(t=r?t:t.prototype,a)&&i(t,a,{configurable:!0,value:e})}},6200:(t,e,r)=>{var i=r(2309),n=r(9711),a=i("keys");t.exports=function(t){return a[t]||(a[t]=n(t))}},5465:(t,e,r)=>{var i=r(7854),n=r(3505),a="__core-js_shared__",s=i[a]||n(a,{});t.exports=s},2309:(t,e,r)=>{var i=r(1913),n=r(5465);(t.exports=function(t,e){return n[t]||(n[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.18.0",mode:i?"pure":"global",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"})},6707:(t,e,r)=>{var i=r(9670),n=r(9483),a=r(5112)("species");t.exports=function(t,e){var r,s=i(t).constructor;return void 0===s||null==(r=i(s)[a])?e:n(r)}},8710:(t,e,r)=>{var i=r(9958),n=r(1340),a=r(4488),s=function(t){return function(e,r){var s,o,h=n(a(e)),u=i(r),l=h.length;return u<0||u>=l?t?"":void 0:(s=h.charCodeAt(u))<55296||s>56319||u+1===l||(o=h.charCodeAt(u+1))<56320||o>57343?t?h.charAt(u):s:t?h.slice(u,u+2):o-56320+(s-55296<<10)+65536}};t.exports={codeAt:s(!1),charAt:s(!0)}},6091:(t,e,r)=>{var i=r(6530).PROPER,n=r(7293),a=r(1361);t.exports=function(t){return n((function(){return!!a[t]()||"​᠎"!=="​᠎"[t]()||i&&a[t].name!==t}))}},3111:(t,e,r)=>{var i=r(4488),n=r(1340),a="["+r(1361)+"]",s=RegExp("^"+a+a+"*"),o=RegExp(a+a+"*$"),h=function(t){return function(e){var r=n(i(e));return 1&t&&(r=r.replace(s,"")),2&t&&(r=r.replace(o,"")),r}};t.exports={start:h(1),end:h(2),trim:h(3)}},261:(t,e,r)=>{var i,n,a,s,o=r(7854),h=r(614),u=r(7293),l=r(9974),c=r(490),g=r(317),f=r(6833),p=r(5268),d=o.setImmediate,v=o.clearImmediate,y=o.process,m=o.MessageChannel,x=o.Dispatch,b=0,S={};try{i=o.location}catch(t){}var w=function(t){if(S.hasOwnProperty(t)){var e=S[t];delete S[t],e()}},T=function(t){return function(){w(t)}},A=function(t){w(t.data)},O=function(t){o.postMessage(String(t),i.protocol+"//"+i.host)};d&&v||(d=function(t){for(var e=[],r=arguments.length,i=1;r>i;)e.push(arguments[i++]);return S[++b]=function(){(h(t)?t:Function(t)).apply(void 0,e)},n(b),b},v=function(t){delete S[t]},p?n=function(t){y.nextTick(T(t))}:x&&x.now?n=function(t){x.now(T(t))}:m&&!f?(s=(a=new m).port2,a.port1.onmessage=A,n=l(s.postMessage,s,1)):o.addEventListener&&h(o.postMessage)&&!o.importScripts&&i&&"file:"!==i.protocol&&!u(O)?(n=O,o.addEventListener("message",A,!1)):n="onreadystatechange"in g("script")?function(t){c.appendChild(g("script")).onreadystatechange=function(){c.removeChild(this),w(t)}}:function(t){setTimeout(T(t),0)}),t.exports={set:d,clear:v}},1400:(t,e,r)=>{var i=r(9958),n=Math.max,a=Math.min;t.exports=function(t,e){var r=i(t);return r<0?n(r+e,0):a(r,e)}},5656:(t,e,r)=>{var i=r(8361),n=r(4488);t.exports=function(t){return i(n(t))}},9958:t=>{var e=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:e)(t)}},7466:(t,e,r)=>{var i=r(9958),n=Math.min;t.exports=function(t){return t>0?n(i(t),9007199254740991):0}},7908:(t,e,r)=>{var i=r(4488);t.exports=function(t){return Object(i(t))}},7593:(t,e,r)=>{var i=r(111),n=r(2190),a=r(8173),s=r(2140),o=r(5112)("toPrimitive");t.exports=function(t,e){if(!i(t)||n(t))return t;var r,h=a(t,o);if(h){if(void 0===e&&(e="default"),r=h.call(t,e),!i(r)||n(r))return r;throw TypeError("Can't convert object to primitive value")}return void 0===e&&(e="number"),s(t,e)}},4948:(t,e,r)=>{var i=r(7593),n=r(2190);t.exports=function(t){var e=i(t,"string");return n(e)?e:String(e)}},1694:(t,e,r)=>{var i={};i[r(5112)("toStringTag")]="z",t.exports="[object z]"===String(i)},1340:(t,e,r)=>{var i=r(648);t.exports=function(t){if("Symbol"===i(t))throw TypeError("Cannot convert a Symbol value to a string");return String(t)}},6330:t=>{t.exports=function(t){try{return String(t)}catch(t){return"Object"}}},9711:t=>{var e=0,r=Math.random();t.exports=function(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++e+r).toString(36)}},3307:(t,e,r)=>{var i=r(133);t.exports=i&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},5112:(t,e,r)=>{var i=r(7854),n=r(2309),a=r(6656),s=r(9711),o=r(133),h=r(3307),u=n("wks"),l=i.Symbol,c=h?l:l&&l.withoutSetter||s;t.exports=function(t){return a(u,t)&&(o||"string"==typeof u[t])||(o&&a(l,t)?u[t]=l[t]:u[t]=c("Symbol."+t)),u[t]}},1361:t=>{t.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},2772:(t,e,r)=>{"use strict";var i=r(2109),n=r(5367).indexOf,a=r(9341),s=[].indexOf,o=!!s&&1/[1].indexOf(1,-0)<0,h=a("indexOf");i({target:"Array",proto:!0,forced:o||!h},{indexOf:function(t){return o?s.apply(this,arguments)||0:n(this,t,arguments.length>1?arguments[1]:void 0)}})},6992:(t,e,r)=>{"use strict";var i=r(5656),n=r(1223),a=r(7497),s=r(9909),o=r(654),h="Array Iterator",u=s.set,l=s.getterFor(h);t.exports=o(Array,"Array",(function(t,e){u(this,{type:h,target:i(t),index:0,kind:e})}),(function(){var t=l(this),e=t.target,r=t.kind,i=t.index++;return!e||i>=e.length?(t.target=void 0,{value:void 0,done:!0}):"keys"==r?{value:i,done:!1}:"values"==r?{value:e[i],done:!1}:{value:[i,e[i]],done:!1}}),"values"),a.Arguments=a.Array,n("keys"),n("values"),n("entries")},5827:(t,e,r)=>{"use strict";var i=r(2109),n=r(3671).left,a=r(9341),s=r(7392),o=r(5268);i({target:"Array",proto:!0,forced:!a("reduce")||!o&&s>79&&s<83},{reduce:function(t){return n(this,t,arguments.length,arguments.length>1?arguments[1]:void 0)}})},5069:(t,e,r)=>{"use strict";var i=r(2109),n=r(1349),a=[].reverse,s=[1,2];i({target:"Array",proto:!0,forced:String(s)===String(s.reverse())},{reverse:function(){return n(this)&&(this.length=this.length),a.call(this)}})},8674:(t,e,r)=>{"use strict";var i,n,a,s,o=r(2109),h=r(1913),u=r(7854),l=r(5005),c=r(3366),g=r(1320),f=r(2248),p=r(7674),d=r(8003),v=r(6340),y=r(9662),m=r(614),x=r(111),b=r(5787),S=r(2788),w=r(408),T=r(7072),A=r(6707),O=r(261).set,P=r(5948),E=r(9478),C=r(842),M=r(8523),N=r(2534),_=r(9909),V=r(4705),R=r(5112),k=r(7871),I=r(5268),L=r(7392),D=R("species"),B="Promise",j=_.get,z=_.set,F=_.getterFor(B),U=c&&c.prototype,H=c,X=U,Y=u.TypeError,q=u.document,W=u.process,G=M.f,Q=G,$=!!(q&&q.createEvent&&u.dispatchEvent),Z=m(u.PromiseRejectionEvent),K="unhandledrejection",J=!1,tt=V(B,(function(){var t=S(H),e=t!==String(H);if(!e&&66===L)return!0;if(h&&!X.finally)return!0;if(L>=51&&/native code/.test(t))return!1;var r=new H((function(t){t(1)})),i=function(t){t((function(){}),(function(){}))};return(r.constructor={})[D]=i,!(J=r.then((function(){}))instanceof i)||!e&&k&&!Z})),et=tt||!T((function(t){H.all(t).catch((function(){}))})),rt=function(t){var e;return!(!x(t)||!m(e=t.then))&&e},it=function(t,e){if(!t.notified){t.notified=!0;var r=t.reactions;P((function(){for(var i=t.value,n=1==t.state,a=0;r.length>a;){var s,o,h,u=r[a++],l=n?u.ok:u.fail,c=u.resolve,g=u.reject,f=u.domain;try{l?(n||(2===t.rejection&&ot(t),t.rejection=1),!0===l?s=i:(f&&f.enter(),s=l(i),f&&(f.exit(),h=!0)),s===u.promise?g(Y("Promise-chain cycle")):(o=rt(s))?o.call(s,c,g):c(s)):g(i)}catch(t){f&&!h&&f.exit(),g(t)}}t.reactions=[],t.notified=!1,e&&!t.rejection&&at(t)}))}},nt=function(t,e,r){var i,n;$?((i=q.createEvent("Event")).promise=e,i.reason=r,i.initEvent(t,!1,!0),u.dispatchEvent(i)):i={promise:e,reason:r},!Z&&(n=u["on"+t])?n(i):t===K&&C("Unhandled promise rejection",r)},at=function(t){O.call(u,(function(){var e,r=t.facade,i=t.value;if(st(t)&&(e=N((function(){I?W.emit("unhandledRejection",i,r):nt(K,r,i)})),t.rejection=I||st(t)?2:1,e.error))throw e.value}))},st=function(t){return 1!==t.rejection&&!t.parent},ot=function(t){O.call(u,(function(){var e=t.facade;I?W.emit("rejectionHandled",e):nt("rejectionhandled",e,t.value)}))},ht=function(t,e,r){return function(i){t(e,i,r)}},ut=function(t,e,r){t.done||(t.done=!0,r&&(t=r),t.value=e,t.state=2,it(t,!0))},lt=function(t,e,r){if(!t.done){t.done=!0,r&&(t=r);try{if(t.facade===e)throw Y("Promise can't be resolved itself");var i=rt(e);i?P((function(){var r={done:!1};try{i.call(e,ht(lt,r,t),ht(ut,r,t))}catch(e){ut(r,e,t)}})):(t.value=e,t.state=1,it(t,!1))}catch(e){ut({done:!1},e,t)}}};if(tt&&(X=(H=function(t){b(this,H,B),y(t),i.call(this);var e=j(this);try{t(ht(lt,e),ht(ut,e))}catch(t){ut(e,t)}}).prototype,(i=function(t){z(this,{type:B,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=f(X,{then:function(t,e){var r=F(this),i=G(A(this,H));return i.ok=!m(t)||t,i.fail=m(e)&&e,i.domain=I?W.domain:void 0,r.parent=!0,r.reactions.push(i),0!=r.state&&it(r,!1),i.promise},catch:function(t){return this.then(void 0,t)}}),n=function(){var t=new i,e=j(t);this.promise=t,this.resolve=ht(lt,e),this.reject=ht(ut,e)},M.f=G=function(t){return t===H||t===a?new n(t):Q(t)},!h&&m(c)&&U!==Object.prototype)){s=U.then,J||(g(U,"then",(function(t,e){var r=this;return new H((function(t,e){s.call(r,t,e)})).then(t,e)}),{unsafe:!0}),g(U,"catch",X.catch,{unsafe:!0}));try{delete U.constructor}catch(t){}p&&p(U,X)}o({global:!0,wrap:!0,forced:tt},{Promise:H}),d(H,B,!1,!0),v(B),a=l(B),o({target:B,stat:!0,forced:tt},{reject:function(t){var e=G(this);return e.reject.call(void 0,t),e.promise}}),o({target:B,stat:!0,forced:h||tt},{resolve:function(t){return E(h&&this===a?H:this,t)}}),o({target:B,stat:!0,forced:et},{all:function(t){var e=this,r=G(e),i=r.resolve,n=r.reject,a=N((function(){var r=y(e.resolve),a=[],s=0,o=1;w(t,(function(t){var h=s++,u=!1;a.push(void 0),o++,r.call(e,t).then((function(t){u||(u=!0,a[h]=t,--o||i(a))}),n)})),--o||i(a)}));return a.error&&n(a.value),r.promise},race:function(t){var e=this,r=G(e),i=r.reject,n=N((function(){var n=y(e.resolve);w(t,(function(t){n.call(e,t).then(r.resolve,i)}))}));return n.error&&i(n.value),r.promise}})},4916:(t,e,r)=>{"use strict";var i=r(2109),n=r(2261);i({target:"RegExp",proto:!0,forced:/./.exec!==n},{exec:n})},9714:(t,e,r)=>{"use strict";var i=r(6530).PROPER,n=r(1320),a=r(9670),s=r(1340),o=r(7293),h=r(7066),u="toString",l=RegExp.prototype,c=l.toString,g=o((function(){return"/a/b"!=c.call({source:"a",flags:"b"})})),f=i&&c.name!=u;(g||f)&&n(RegExp.prototype,u,(function(){var t=a(this),e=s(t.source),r=t.flags;return"/"+e+"/"+s(void 0===r&&t instanceof RegExp&&!("flags"in l)?h.call(t):r)}),{unsafe:!0})},7852:(t,e,r)=>{"use strict";var i,n=r(2109),a=r(1236).f,s=r(7466),o=r(1340),h=r(3929),u=r(4488),l=r(4964),c=r(1913),g="".endsWith,f=Math.min,p=l("endsWith");n({target:"String",proto:!0,forced:!(!c&&!p&&(i=a(String.prototype,"endsWith"),i&&!i.writable)||p)},{endsWith:function(t){var e=o(u(this));h(t);var r=arguments.length>1?arguments[1]:void 0,i=s(e.length),n=void 0===r?i:f(s(r),i),a=o(t);return g?g.call(e,a,n):e.slice(n-a.length,n)===a}})},2023:(t,e,r)=>{"use strict";var i=r(2109),n=r(3929),a=r(4488),s=r(1340);i({target:"String",proto:!0,forced:!r(4964)("includes")},{includes:function(t){return!!~s(a(this)).indexOf(s(n(t)),arguments.length>1?arguments[1]:void 0)}})},4723:(t,e,r)=>{"use strict";var i=r(7007),n=r(9670),a=r(7466),s=r(1340),o=r(4488),h=r(8173),u=r(1530),l=r(7651);i("match",(function(t,e,r){return[function(e){var r=o(this),i=null==e?void 0:h(e,t);return i?i.call(e,r):new RegExp(e)[t](s(r))},function(t){var i=n(this),o=s(t),h=r(e,i,o);if(h.done)return h.value;if(!i.global)return l(i,o);var c=i.unicode;i.lastIndex=0;for(var g,f=[],p=0;null!==(g=l(i,o));){var d=s(g[0]);f[p]=d,""===d&&(i.lastIndex=u(o,a(i.lastIndex),c)),p++}return 0===p?null:f}]}))},5306:(t,e,r)=>{"use strict";var i=r(7007),n=r(7293),a=r(9670),s=r(614),o=r(9958),h=r(7466),u=r(1340),l=r(4488),c=r(1530),g=r(8173),f=r(647),p=r(7651),d=r(5112)("replace"),v=Math.max,y=Math.min,m="$0"==="a".replace(/./,"$0"),x=!!/./[d]&&""===/./[d]("a","$0");i("replace",(function(t,e,r){var i=x?"$":"$0";return[function(t,r){var i=l(this),n=null==t?void 0:g(t,d);return n?n.call(t,i,r):e.call(u(i),t,r)},function(t,n){var l=a(this),g=u(t);if("string"==typeof n&&-1===n.indexOf(i)&&-1===n.indexOf("$<")){var d=r(e,l,g,n);if(d.done)return d.value}var m=s(n);m||(n=u(n));var x=l.global;if(x){var b=l.unicode;l.lastIndex=0}for(var S=[];;){var w=p(l,g);if(null===w)break;if(S.push(w),!x)break;""===u(w[0])&&(l.lastIndex=c(g,h(l.lastIndex),b))}for(var T,A="",O=0,P=0;P<S.length;P++){w=S[P];for(var E=u(w[0]),C=v(y(o(w.index),g.length),0),M=[],N=1;N<w.length;N++)M.push(void 0===(T=w[N])?T:String(T));var _=w.groups;if(m){var V=[E].concat(M,C,g);void 0!==_&&V.push(_);var R=u(n.apply(void 0,V))}else R=f(E,g,C,M,_,n);C>=O&&(A+=g.slice(O,C)+R,O=C+E.length)}return A+g.slice(O)}]}),!!n((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")}))||!m||x)},3123:(t,e,r)=>{"use strict";var i=r(7007),n=r(7850),a=r(9670),s=r(4488),o=r(6707),h=r(1530),u=r(7466),l=r(1340),c=r(8173),g=r(7651),f=r(2261),p=r(2999),d=r(7293),v=p.UNSUPPORTED_Y,y=[].push,m=Math.min,x=4294967295;i("split",(function(t,e,r){var i;return i="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(t,r){var i=l(s(this)),a=void 0===r?x:r>>>0;if(0===a)return[];if(void 0===t)return[i];if(!n(t))return e.call(i,t,a);for(var o,h,u,c=[],g=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),p=0,d=new RegExp(t.source,g+"g");(o=f.call(d,i))&&!((h=d.lastIndex)>p&&(c.push(i.slice(p,o.index)),o.length>1&&o.index<i.length&&y.apply(c,o.slice(1)),u=o[0].length,p=h,c.length>=a));)d.lastIndex===o.index&&d.lastIndex++;return p===i.length?!u&&d.test("")||c.push(""):c.push(i.slice(p)),c.length>a?c.slice(0,a):c}:"0".split(void 0,0).length?function(t,r){return void 0===t&&0===r?[]:e.call(this,t,r)}:e,[function(e,r){var n=s(this),a=null==e?void 0:c(e,t);return a?a.call(e,n,r):i.call(l(n),e,r)},function(t,n){var s=a(this),c=l(t),f=r(i,s,c,n,i!==e);if(f.done)return f.value;var p=o(s,RegExp),d=s.unicode,y=(s.ignoreCase?"i":"")+(s.multiline?"m":"")+(s.unicode?"u":"")+(v?"g":"y"),b=new p(v?"^(?:"+s.source+")":s,y),S=void 0===n?x:n>>>0;if(0===S)return[];if(0===c.length)return null===g(b,c)?[c]:[];for(var w=0,T=0,A=[];T<c.length;){b.lastIndex=v?0:T;var O,P=g(b,v?c.slice(T):c);if(null===P||(O=m(u(b.lastIndex+(v?T:0)),c.length))===w)T=h(c,T,d);else{if(A.push(c.slice(w,T)),A.length===S)return A;for(var E=1;E<=P.length-1;E++)if(A.push(P[E]),A.length===S)return A;T=w=O}}return A.push(c.slice(w)),A}]}),!!d((function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var r="ab".split(t);return 2!==r.length||"a"!==r[0]||"b"!==r[1]})),v)},3157:(t,e,r)=>{"use strict";var i,n=r(2109),a=r(1236).f,s=r(7466),o=r(1340),h=r(3929),u=r(4488),l=r(4964),c=r(1913),g="".startsWith,f=Math.min,p=l("startsWith");n({target:"String",proto:!0,forced:!(!c&&!p&&(i=a(String.prototype,"startsWith"),i&&!i.writable)||p)},{startsWith:function(t){var e=o(u(this));h(t);var r=s(f(arguments.length>1?arguments[1]:void 0,e.length)),i=o(t);return g?g.call(e,i,r):e.slice(r,r+i.length)===i}})},3210:(t,e,r)=>{"use strict";var i=r(2109),n=r(3111).trim;i({target:"String",proto:!0,forced:r(6091)("trim")},{trim:function(){return n(this)}})},3948:(t,e,r)=>{var i=r(7854),n=r(8324),a=r(8509),s=r(6992),o=r(8880),h=r(5112),u=h("iterator"),l=h("toStringTag"),c=s.values,g=function(t,e){if(t){if(t[u]!==c)try{o(t,u,c)}catch(e){t[u]=c}if(t[l]||o(t,l,e),n[e])for(var r in s)if(t[r]!==s[r])try{o(t,r,s[r])}catch(e){t[r]=s[r]}}};for(var f in n)g(i[f]&&i[f].prototype,f);g(a,"DOMTokenList")},75:function(t){(function(){var e,r,i,n,a,s;"undefined"!=typeof performance&&null!==performance&&performance.now?t.exports=function(){return performance.now()}:"undefined"!=typeof process&&null!==process&&process.hrtime?(t.exports=function(){return(e()-a)/1e6},r=process.hrtime,n=(e=function(){var t;return 1e9*(t=r())[0]+t[1]})(),s=1e9*process.uptime(),a=n-s):Date.now?(t.exports=function(){return Date.now()-i},i=Date.now()):(t.exports=function(){return(new Date).getTime()-i},i=(new Date).getTime())}).call(this)},4087:(t,e,r)=>{for(var i=r(75),n="undefined"==typeof window?r.g:window,a=["moz","webkit"],s="AnimationFrame",o=n["request"+s],h=n["cancel"+s]||n["cancelRequest"+s],u=0;!o&&u<a.length;u++)o=n[a[u]+"Request"+s],h=n[a[u]+"Cancel"+s]||n[a[u]+"CancelRequest"+s];if(!o||!h){var l=0,c=0,g=[];o=function(t){if(0===g.length){var e=i(),r=Math.max(0,16.666666666666668-(e-l));l=r+e,setTimeout((function(){var t=g.slice(0);g.length=0;for(var e=0;e<t.length;e++)if(!t[e].cancelled)try{t[e].callback(l)}catch(t){setTimeout((function(){throw t}),0)}}),Math.round(r))}return g.push({handle:++c,callback:t,cancelled:!1}),c},h=function(t){for(var e=0;e<g.length;e++)g[e].handle===t&&(g[e].cancelled=!0)}}t.exports=function(t){return o.call(n,t)},t.exports.cancel=function(){h.apply(n,arguments)},t.exports.polyfill=function(t){t||(t=n),t.requestAnimationFrame=o,t.cancelAnimationFrame=h}},6131:t=>{t.exports=function(t){this.ok=!1,this.alpha=1,"#"==t.charAt(0)&&(t=t.substr(1,6)),t=(t=t.replace(/ /g,"")).toLowerCase();var e={aliceblue:"f0f8ff",antiquewhite:"faebd7",aqua:"00ffff",aquamarine:"7fffd4",azure:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"000000",blanchedalmond:"ffebcd",blue:"0000ff",blueviolet:"8a2be2",brown:"a52a2a",burlywood:"deb887",cadetblue:"5f9ea0",chartreuse:"7fff00",chocolate:"d2691e",coral:"ff7f50",cornflowerblue:"6495ed",cornsilk:"fff8dc",crimson:"dc143c",cyan:"00ffff",darkblue:"00008b",darkcyan:"008b8b",darkgoldenrod:"b8860b",darkgray:"a9a9a9",darkgreen:"006400",darkkhaki:"bdb76b",darkmagenta:"8b008b",darkolivegreen:"556b2f",darkorange:"ff8c00",darkorchid:"9932cc",darkred:"8b0000",darksalmon:"e9967a",darkseagreen:"8fbc8f",darkslateblue:"483d8b",darkslategray:"2f4f4f",darkturquoise:"00ced1",darkviolet:"9400d3",deeppink:"ff1493",deepskyblue:"00bfff",dimgray:"696969",dodgerblue:"1e90ff",feldspar:"d19275",firebrick:"b22222",floralwhite:"fffaf0",forestgreen:"228b22",fuchsia:"ff00ff",gainsboro:"dcdcdc",ghostwhite:"f8f8ff",gold:"ffd700",goldenrod:"daa520",gray:"808080",green:"008000",greenyellow:"adff2f",honeydew:"f0fff0",hotpink:"ff69b4",indianred:"cd5c5c",indigo:"4b0082",ivory:"fffff0",khaki:"f0e68c",lavender:"e6e6fa",lavenderblush:"fff0f5",lawngreen:"7cfc00",lemonchiffon:"fffacd",lightblue:"add8e6",lightcoral:"f08080",lightcyan:"e0ffff",lightgoldenrodyellow:"fafad2",lightgrey:"d3d3d3",lightgreen:"90ee90",lightpink:"ffb6c1",lightsalmon:"ffa07a",lightseagreen:"20b2aa",lightskyblue:"87cefa",lightslateblue:"8470ff",lightslategray:"778899",lightsteelblue:"b0c4de",lightyellow:"ffffe0",lime:"00ff00",limegreen:"32cd32",linen:"faf0e6",magenta:"ff00ff",maroon:"800000",mediumaquamarine:"66cdaa",mediumblue:"0000cd",mediumorchid:"ba55d3",mediumpurple:"9370d8",mediumseagreen:"3cb371",mediumslateblue:"7b68ee",mediumspringgreen:"00fa9a",mediumturquoise:"48d1cc",mediumvioletred:"c71585",midnightblue:"191970",mintcream:"f5fffa",mistyrose:"ffe4e1",moccasin:"ffe4b5",navajowhite:"ffdead",navy:"000080",oldlace:"fdf5e6",olive:"808000",olivedrab:"6b8e23",orange:"ffa500",orangered:"ff4500",orchid:"da70d6",palegoldenrod:"eee8aa",palegreen:"98fb98",paleturquoise:"afeeee",palevioletred:"d87093",papayawhip:"ffefd5",peachpuff:"ffdab9",peru:"cd853f",pink:"ffc0cb",plum:"dda0dd",powderblue:"b0e0e6",purple:"800080",rebeccapurple:"663399",red:"ff0000",rosybrown:"bc8f8f",royalblue:"4169e1",saddlebrown:"8b4513",salmon:"fa8072",sandybrown:"f4a460",seagreen:"2e8b57",seashell:"fff5ee",sienna:"a0522d",silver:"c0c0c0",skyblue:"87ceeb",slateblue:"6a5acd",slategray:"708090",snow:"fffafa",springgreen:"00ff7f",steelblue:"4682b4",tan:"d2b48c",teal:"008080",thistle:"d8bfd8",tomato:"ff6347",turquoise:"40e0d0",violet:"ee82ee",violetred:"d02090",wheat:"f5deb3",white:"ffffff",whitesmoke:"f5f5f5",yellow:"ffff00",yellowgreen:"9acd32"};t=e[t]||t;for(var r=[{re:/^rgba\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3}),\s*((?:\d?\.)?\d)\)$/,example:["rgba(123, 234, 45, 0.8)","rgba(255,234,245,1.0)"],process:function(t){return[parseInt(t[1]),parseInt(t[2]),parseInt(t[3]),parseFloat(t[4])]}},{re:/^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/,example:["rgb(123, 234, 45)","rgb(255,234,245)"],process:function(t){return[parseInt(t[1]),parseInt(t[2]),parseInt(t[3])]}},{re:/^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,example:["#00ff00","336699"],process:function(t){return[parseInt(t[1],16),parseInt(t[2],16),parseInt(t[3],16)]}},{re:/^([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,example:["#fb0","f0f"],process:function(t){return[parseInt(t[1]+t[1],16),parseInt(t[2]+t[2],16),parseInt(t[3]+t[3],16)]}}],i=0;i<r.length;i++){var n=r[i].re,a=r[i].process,s=n.exec(t);if(s){var o=a(s);this.r=o[0],this.g=o[1],this.b=o[2],o.length>3&&(this.alpha=o[3]),this.ok=!0}}this.r=this.r<0||isNaN(this.r)?0:this.r>255?255:this.r,this.g=this.g<0||isNaN(this.g)?0:this.g>255?255:this.g,this.b=this.b<0||isNaN(this.b)?0:this.b>255?255:this.b,this.alpha=this.alpha<0?0:this.alpha>1||isNaN(this.alpha)?1:this.alpha,this.toRGB=function(){return"rgb("+this.r+", "+this.g+", "+this.b+")"},this.toRGBA=function(){return"rgba("+this.r+", "+this.g+", "+this.b+", "+this.alpha+")"},this.toHex=function(){var t=this.r.toString(16),e=this.g.toString(16),r=this.b.toString(16);return 1==t.length&&(t="0"+t),1==e.length&&(e="0"+e),1==r.length&&(r="0"+r),"#"+t+e+r},this.getHelpXML=function(){for(var t=new Array,i=0;i<r.length;i++)for(var n=r[i].example,a=0;a<n.length;a++)t[t.length]=n[a];for(var s in e)t[t.length]=s;var o=document.createElement("ul");for(o.setAttribute("id","rgbcolor-examples"),i=0;i<t.length;i++)try{var h=document.createElement("li"),u=new RGBColor(t[i]),l=document.createElement("div");l.style.cssText="margin: 3px; border: 1px solid black; background:"+u.toHex()+"; color:"+u.toHex(),l.appendChild(document.createTextNode("test"));var c=document.createTextNode(" "+t[i]+" -> "+u.toRGB()+" -> "+u.toHex());h.appendChild(l),h.appendChild(c),o.appendChild(h)}catch(t){}return o}}},2117:(t,e,r)=>{"use strict";r.r(e),r.d(e,{AElement:()=>le,AnimateColorElement:()=>ne,AnimateElement:()=>ie,AnimateTransformElement:()=>ae,BoundingBox:()=>kt,CB1:()=>it,CB2:()=>nt,CB3:()=>at,CB4:()=>st,Canvg:()=>Fe,CircleElement:()=>Xt,ClipPathElement:()=>Ee,DefsElement:()=>Zt,DescElement:()=>ke,Document:()=>Be,Element:()=>Ct,EllipseElement:()=>Yt,FeColorMatrixElement:()=>Ae,FeCompositeElement:()=>_e,FeDropShadowElement:()=>Me,FeGaussianBlurElement:()=>Ve,FeMorphologyElement:()=>Ne,FilterElement:()=>Ce,Font:()=>Rt,FontElement:()=>se,FontFaceElement:()=>oe,GElement:()=>Kt,GlyphElement:()=>Bt,GradientElement:()=>Jt,ImageElement:()=>de,LineElement:()=>qt,LinearGradientElement:()=>te,MarkerElement:()=>$t,MaskElement:()=>Oe,Matrix:()=>Tt,MissingGlyphElement:()=>he,Mouse:()=>ft,PSEUDO_ZERO:()=>J,Parser:()=>xt,PathElement:()=>Dt,PathParser:()=>It,PatternElement:()=>Qt,Point:()=>gt,PolygonElement:()=>Gt,PolylineElement:()=>Wt,Property:()=>lt,QB1:()=>ot,QB2:()=>ht,QB3:()=>ut,RadialGradientElement:()=>ee,RectElement:()=>Ht,RenderedElement:()=>Lt,Rotate:()=>St,SVGElement:()=>Ut,SVGFontLoader:()=>ye,Scale:()=>wt,Screen:()=>vt,Skew:()=>At,SkewX:()=>Ot,SkewY:()=>Pt,StopElement:()=>re,StyleElement:()=>me,SymbolElement:()=>ve,TRefElement:()=>ue,TSpanElement:()=>zt,TextElement:()=>jt,TextPathElement:()=>fe,TitleElement:()=>Re,Transform:()=>Et,Translate:()=>bt,UnknownElement:()=>Mt,UseElement:()=>xe,ViewPort:()=>ct,compressSpaces:()=>L,default:()=>Ue,getSelectorSpecificity:()=>K,normalizeAttributeName:()=>F,normalizeColor:()=>H,parseExternalUrl:()=>U,presets:()=>I,toNumbers:()=>j,trimLeft:()=>D,trimRight:()=>B,vectorMagnitude:()=>tt,vectorsAngle:()=>rt,vectorsRatio:()=>et}),r(8674);var i=r(2702);function n(t,e,r,n,a,s,o){try{var h=t[s](o),u=h.value}catch(t){return void r(t)}h.done?e(u):i.resolve(u).then(n,a)}function a(t){return function(){var e=this,r=arguments;return new i((function(i,a){var s=t.apply(e,r);function o(t){n(s,i,a,o,h,"next",t)}function h(t){n(s,i,a,o,h,"throw",t)}o(void 0)}))}}function s(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}r(4723),r(5306),r(3157),r(6992),r(3948),r(5827),r(7852),r(3123);var o=r(4087),h=(r(3210),r(6131)),u=(r(2023),r(2772),r(5069),function(t,e){return(u=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)});function l(t,e){function r(){this.constructor=t}u(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}function c(t,e){var r=t[0],i=t[1];return[r*Math.cos(e)-i*Math.sin(e),r*Math.sin(e)+i*Math.cos(e)]}function g(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];for(var r=0;r<t.length;r++)if("number"!=typeof t[r])throw new Error("assertNumbers arguments["+r+"] is not a number. "+typeof t[r]+" == typeof "+t[r]);return!0}var f=Math.PI;function p(t,e,r){t.lArcFlag=0===t.lArcFlag?0:1,t.sweepFlag=0===t.sweepFlag?0:1;var i=t.rX,n=t.rY,a=t.x,s=t.y;i=Math.abs(t.rX),n=Math.abs(t.rY);var o=c([(e-a)/2,(r-s)/2],-t.xRot/180*f),h=o[0],u=o[1],l=Math.pow(h,2)/Math.pow(i,2)+Math.pow(u,2)/Math.pow(n,2);1<l&&(i*=Math.sqrt(l),n*=Math.sqrt(l)),t.rX=i,t.rY=n;var g=Math.pow(i,2)*Math.pow(u,2)+Math.pow(n,2)*Math.pow(h,2),p=(t.lArcFlag!==t.sweepFlag?1:-1)*Math.sqrt(Math.max(0,(Math.pow(i,2)*Math.pow(n,2)-g)/g)),d=i*u/n*p,v=-n*h/i*p,y=c([d,v],t.xRot/180*f);t.cX=y[0]+(e+a)/2,t.cY=y[1]+(r+s)/2,t.phi1=Math.atan2((u-v)/n,(h-d)/i),t.phi2=Math.atan2((-u-v)/n,(-h-d)/i),0===t.sweepFlag&&t.phi2>t.phi1&&(t.phi2-=2*f),1===t.sweepFlag&&t.phi2<t.phi1&&(t.phi2+=2*f),t.phi1*=180/f,t.phi2*=180/f}function d(t,e,r){g(t,e,r);var i=t*t+e*e-r*r;if(0>i)return[];if(0===i)return[[t*r/(t*t+e*e),e*r/(t*t+e*e)]];var n=Math.sqrt(i);return[[(t*r+e*n)/(t*t+e*e),(e*r-t*n)/(t*t+e*e)],[(t*r-e*n)/(t*t+e*e),(e*r+t*n)/(t*t+e*e)]]}var v,y=Math.PI/180;function m(t,e,r){return(1-r)*t+r*e}function x(t,e,r,i){return t+Math.cos(i/180*f)*e+Math.sin(i/180*f)*r}function b(t,e,r,i){var n=e-t,a=r-e,s=3*n+3*(i-r)-6*a,o=6*(a-n),h=3*n;return Math.abs(s)<1e-6?[-h/o]:function(t,e,r){void 0===r&&(r=1e-6);var i=t*t/4-e;if(i<-r)return[];if(i<=r)return[-t/2];var n=Math.sqrt(i);return[-t/2-n,-t/2+n]}(o/s,h/s,1e-6)}function S(t,e,r,i,n){var a=1-n;return t*(a*a*a)+e*(3*a*a*n)+r*(3*a*n*n)+i*(n*n*n)}!function(t){function e(){return n((function(t,e,r){return t.relative&&(void 0!==t.x1&&(t.x1+=e),void 0!==t.y1&&(t.y1+=r),void 0!==t.x2&&(t.x2+=e),void 0!==t.y2&&(t.y2+=r),void 0!==t.x&&(t.x+=e),void 0!==t.y&&(t.y+=r),t.relative=!1),t}))}function r(){var t=NaN,e=NaN,r=NaN,i=NaN;return n((function(n,a,s){return n.type&E.SMOOTH_CURVE_TO&&(n.type=E.CURVE_TO,t=isNaN(t)?a:t,e=isNaN(e)?s:e,n.x1=n.relative?a-t:2*a-t,n.y1=n.relative?s-e:2*s-e),n.type&E.CURVE_TO?(t=n.relative?a+n.x2:n.x2,e=n.relative?s+n.y2:n.y2):(t=NaN,e=NaN),n.type&E.SMOOTH_QUAD_TO&&(n.type=E.QUAD_TO,r=isNaN(r)?a:r,i=isNaN(i)?s:i,n.x1=n.relative?a-r:2*a-r,n.y1=n.relative?s-i:2*s-i),n.type&E.QUAD_TO?(r=n.relative?a+n.x1:n.x1,i=n.relative?s+n.y1:n.y1):(r=NaN,i=NaN),n}))}function i(){var t=NaN,e=NaN;return n((function(r,i,n){if(r.type&E.SMOOTH_QUAD_TO&&(r.type=E.QUAD_TO,t=isNaN(t)?i:t,e=isNaN(e)?n:e,r.x1=r.relative?i-t:2*i-t,r.y1=r.relative?n-e:2*n-e),r.type&E.QUAD_TO){t=r.relative?i+r.x1:r.x1,e=r.relative?n+r.y1:r.y1;var a=r.x1,s=r.y1;r.type=E.CURVE_TO,r.x1=((r.relative?0:i)+2*a)/3,r.y1=((r.relative?0:n)+2*s)/3,r.x2=(r.x+2*a)/3,r.y2=(r.y+2*s)/3}else t=NaN,e=NaN;return r}))}function n(t){var e=0,r=0,i=NaN,n=NaN;return function(a){if(isNaN(i)&&!(a.type&E.MOVE_TO))throw new Error("path must start with moveto");var s=t(a,e,r,i,n);return a.type&E.CLOSE_PATH&&(e=i,r=n),void 0!==a.x&&(e=a.relative?e+a.x:a.x),void 0!==a.y&&(r=a.relative?r+a.y:a.y),a.type&E.MOVE_TO&&(i=e,n=r),s}}function a(t,e,r,i,a,s){return g(t,e,r,i,a,s),n((function(n,o,h,u){var l=n.x1,c=n.x2,g=n.relative&&!isNaN(u),f=void 0!==n.x?n.x:g?0:o,p=void 0!==n.y?n.y:g?0:h;function d(t){return t*t}n.type&E.HORIZ_LINE_TO&&0!==e&&(n.type=E.LINE_TO,n.y=n.relative?0:h),n.type&E.VERT_LINE_TO&&0!==r&&(n.type=E.LINE_TO,n.x=n.relative?0:o),void 0!==n.x&&(n.x=n.x*t+p*r+(g?0:a)),void 0!==n.y&&(n.y=f*e+n.y*i+(g?0:s)),void 0!==n.x1&&(n.x1=n.x1*t+n.y1*r+(g?0:a)),void 0!==n.y1&&(n.y1=l*e+n.y1*i+(g?0:s)),void 0!==n.x2&&(n.x2=n.x2*t+n.y2*r+(g?0:a)),void 0!==n.y2&&(n.y2=c*e+n.y2*i+(g?0:s));var v=t*i-e*r;if(void 0!==n.xRot&&(1!==t||0!==e||0!==r||1!==i))if(0===v)delete n.rX,delete n.rY,delete n.xRot,delete n.lArcFlag,delete n.sweepFlag,n.type=E.LINE_TO;else{var y=n.xRot*Math.PI/180,m=Math.sin(y),x=Math.cos(y),b=1/d(n.rX),S=1/d(n.rY),w=d(x)*b+d(m)*S,T=2*m*x*(b-S),A=d(m)*b+d(x)*S,O=w*i*i-T*e*i+A*e*e,P=T*(t*i+e*r)-2*(w*r*i+A*t*e),C=w*r*r-T*t*r+A*t*t,M=(Math.atan2(P,O-C)+Math.PI)%Math.PI/2,N=Math.sin(M),_=Math.cos(M);n.rX=Math.abs(v)/Math.sqrt(O*d(_)+P*N*_+C*d(N)),n.rY=Math.abs(v)/Math.sqrt(O*d(N)-P*N*_+C*d(_)),n.xRot=180*M/Math.PI}return void 0!==n.sweepFlag&&0>v&&(n.sweepFlag=+!n.sweepFlag),n}))}t.ROUND=function(t){function e(e){return Math.round(e*t)/t}return void 0===t&&(t=1e13),g(t),function(t){return void 0!==t.x1&&(t.x1=e(t.x1)),void 0!==t.y1&&(t.y1=e(t.y1)),void 0!==t.x2&&(t.x2=e(t.x2)),void 0!==t.y2&&(t.y2=e(t.y2)),void 0!==t.x&&(t.x=e(t.x)),void 0!==t.y&&(t.y=e(t.y)),void 0!==t.rX&&(t.rX=e(t.rX)),void 0!==t.rY&&(t.rY=e(t.rY)),t}},t.TO_ABS=e,t.TO_REL=function(){return n((function(t,e,r){return t.relative||(void 0!==t.x1&&(t.x1-=e),void 0!==t.y1&&(t.y1-=r),void 0!==t.x2&&(t.x2-=e),void 0!==t.y2&&(t.y2-=r),void 0!==t.x&&(t.x-=e),void 0!==t.y&&(t.y-=r),t.relative=!0),t}))},t.NORMALIZE_HVZ=function(t,e,r){return void 0===t&&(t=!0),void 0===e&&(e=!0),void 0===r&&(r=!0),n((function(i,n,a,s,o){if(isNaN(s)&&!(i.type&E.MOVE_TO))throw new Error("path must start with moveto");return e&&i.type&E.HORIZ_LINE_TO&&(i.type=E.LINE_TO,i.y=i.relative?0:a),r&&i.type&E.VERT_LINE_TO&&(i.type=E.LINE_TO,i.x=i.relative?0:n),t&&i.type&E.CLOSE_PATH&&(i.type=E.LINE_TO,i.x=i.relative?s-n:s,i.y=i.relative?o-a:o),i.type&E.ARC&&(0===i.rX||0===i.rY)&&(i.type=E.LINE_TO,delete i.rX,delete i.rY,delete i.xRot,delete i.lArcFlag,delete i.sweepFlag),i}))},t.NORMALIZE_ST=r,t.QT_TO_C=i,t.INFO=n,t.SANITIZE=function(t){void 0===t&&(t=0),g(t);var e=NaN,r=NaN,i=NaN,a=NaN;return n((function(n,s,o,h,u){var l=Math.abs,c=!1,g=0,f=0;if(n.type&E.SMOOTH_CURVE_TO&&(g=isNaN(e)?0:s-e,f=isNaN(r)?0:o-r),n.type&(E.CURVE_TO|E.SMOOTH_CURVE_TO)?(e=n.relative?s+n.x2:n.x2,r=n.relative?o+n.y2:n.y2):(e=NaN,r=NaN),n.type&E.SMOOTH_QUAD_TO?(i=isNaN(i)?s:2*s-i,a=isNaN(a)?o:2*o-a):n.type&E.QUAD_TO?(i=n.relative?s+n.x1:n.x1,a=n.relative?o+n.y1:n.y2):(i=NaN,a=NaN),n.type&E.LINE_COMMANDS||n.type&E.ARC&&(0===n.rX||0===n.rY||!n.lArcFlag)||n.type&E.CURVE_TO||n.type&E.SMOOTH_CURVE_TO||n.type&E.QUAD_TO||n.type&E.SMOOTH_QUAD_TO){var p=void 0===n.x?0:n.relative?n.x:n.x-s,d=void 0===n.y?0:n.relative?n.y:n.y-o;g=isNaN(i)?void 0===n.x1?g:n.relative?n.x:n.x1-s:i-s,f=isNaN(a)?void 0===n.y1?f:n.relative?n.y:n.y1-o:a-o;var v=void 0===n.x2?0:n.relative?n.x:n.x2-s,y=void 0===n.y2?0:n.relative?n.y:n.y2-o;l(p)<=t&&l(d)<=t&&l(g)<=t&&l(f)<=t&&l(v)<=t&&l(y)<=t&&(c=!0)}return n.type&E.CLOSE_PATH&&l(s-h)<=t&&l(o-u)<=t&&(c=!0),c?[]:n}))},t.MATRIX=a,t.ROTATE=function(t,e,r){void 0===e&&(e=0),void 0===r&&(r=0),g(t,e,r);var i=Math.sin(t),n=Math.cos(t);return a(n,i,-i,n,e-e*n+r*i,r-e*i-r*n)},t.TRANSLATE=function(t,e){return void 0===e&&(e=0),g(t,e),a(1,0,0,1,t,e)},t.SCALE=function(t,e){return void 0===e&&(e=t),g(t,e),a(t,0,0,e,0,0)},t.SKEW_X=function(t){return g(t),a(1,0,Math.atan(t),1,0,0)},t.SKEW_Y=function(t){return g(t),a(1,Math.atan(t),0,1,0,0)},t.X_AXIS_SYMMETRY=function(t){return void 0===t&&(t=0),g(t),a(-1,0,0,1,t,0)},t.Y_AXIS_SYMMETRY=function(t){return void 0===t&&(t=0),g(t),a(1,0,0,-1,0,t)},t.A_TO_C=function(){return n((function(t,e,r){return E.ARC===t.type?function(t,e,r){var i,n,a,s;t.cX||p(t,e,r);for(var o=Math.min(t.phi1,t.phi2),h=Math.max(t.phi1,t.phi2)-o,u=Math.ceil(h/90),l=new Array(u),g=e,f=r,d=0;d<u;d++){var v=m(t.phi1,t.phi2,d/u),x=m(t.phi1,t.phi2,(d+1)/u),b=x-v,S=4/3*Math.tan(b*y/4),w=[Math.cos(v*y)-S*Math.sin(v*y),Math.sin(v*y)+S*Math.cos(v*y)],T=w[0],A=w[1],O=[Math.cos(x*y),Math.sin(x*y)],P=O[0],C=O[1],M=[P+S*Math.sin(x*y),C-S*Math.cos(x*y)],N=M[0],_=M[1];l[d]={relative:t.relative,type:E.CURVE_TO};var V=function(e,r){var i=c([e*t.rX,r*t.rY],t.xRot),n=i[0],a=i[1];return[t.cX+n,t.cY+a]};i=V(T,A),l[d].x1=i[0],l[d].y1=i[1],n=V(N,_),l[d].x2=n[0],l[d].y2=n[1],a=V(P,C),l[d].x=a[0],l[d].y=a[1],t.relative&&(l[d].x1-=g,l[d].y1-=f,l[d].x2-=g,l[d].y2-=f,l[d].x-=g,l[d].y-=f),g=(s=[l[d].x,l[d].y])[0],f=s[1]}return l}(t,t.relative?0:e,t.relative?0:r):t}))},t.ANNOTATE_ARCS=function(){return n((function(t,e,r){return t.relative&&(e=0,r=0),E.ARC===t.type&&p(t,e,r),t}))},t.CLONE=function(){return function(t){var e={};for(var r in t)e[r]=t[r];return e}},t.CALCULATE_BOUNDS=function(){var t=e(),a=i(),s=r(),o=n((function(e,r,i){var n=s(a(t(function(t){var e={};for(var r in t)e[r]=t[r];return e}(e))));function h(t){t>o.maxX&&(o.maxX=t),t<o.minX&&(o.minX=t)}function u(t){t>o.maxY&&(o.maxY=t),t<o.minY&&(o.minY=t)}if(n.type&E.DRAWING_COMMANDS&&(h(r),u(i)),n.type&E.HORIZ_LINE_TO&&h(n.x),n.type&E.VERT_LINE_TO&&u(n.y),n.type&E.LINE_TO&&(h(n.x),u(n.y)),n.type&E.CURVE_TO){h(n.x),u(n.y);for(var l=0,c=b(r,n.x1,n.x2,n.x);l<c.length;l++)0<(R=c[l])&&1>R&&h(S(r,n.x1,n.x2,n.x,R));for(var g=0,f=b(i,n.y1,n.y2,n.y);g<f.length;g++)0<(R=f[g])&&1>R&&u(S(i,n.y1,n.y2,n.y,R))}if(n.type&E.ARC){h(n.x),u(n.y),p(n,r,i);for(var v=n.xRot/180*Math.PI,y=Math.cos(v)*n.rX,m=Math.sin(v)*n.rX,w=-Math.sin(v)*n.rY,T=Math.cos(v)*n.rY,A=n.phi1<n.phi2?[n.phi1,n.phi2]:-180>n.phi2?[n.phi2+360,n.phi1+360]:[n.phi2,n.phi1],O=A[0],P=A[1],C=function(t){var e=t[0],r=t[1],i=180*Math.atan2(r,e)/Math.PI;return i<O?i+360:i},M=0,N=d(w,-y,0).map(C);M<N.length;M++)(R=N[M])>O&&R<P&&h(x(n.cX,y,w,R));for(var _=0,V=d(T,-m,0).map(C);_<V.length;_++){var R;(R=V[_])>O&&R<P&&u(x(n.cY,m,T,R))}}return e}));return o.minX=1/0,o.maxX=-1/0,o.minY=1/0,o.maxY=-1/0,o}}(v||(v={}));var w,T=function(){function t(){}return t.prototype.round=function(t){return this.transform(v.ROUND(t))},t.prototype.toAbs=function(){return this.transform(v.TO_ABS())},t.prototype.toRel=function(){return this.transform(v.TO_REL())},t.prototype.normalizeHVZ=function(t,e,r){return this.transform(v.NORMALIZE_HVZ(t,e,r))},t.prototype.normalizeST=function(){return this.transform(v.NORMALIZE_ST())},t.prototype.qtToC=function(){return this.transform(v.QT_TO_C())},t.prototype.aToC=function(){return this.transform(v.A_TO_C())},t.prototype.sanitize=function(t){return this.transform(v.SANITIZE(t))},t.prototype.translate=function(t,e){return this.transform(v.TRANSLATE(t,e))},t.prototype.scale=function(t,e){return this.transform(v.SCALE(t,e))},t.prototype.rotate=function(t,e,r){return this.transform(v.ROTATE(t,e,r))},t.prototype.matrix=function(t,e,r,i,n,a){return this.transform(v.MATRIX(t,e,r,i,n,a))},t.prototype.skewX=function(t){return this.transform(v.SKEW_X(t))},t.prototype.skewY=function(t){return this.transform(v.SKEW_Y(t))},t.prototype.xSymmetry=function(t){return this.transform(v.X_AXIS_SYMMETRY(t))},t.prototype.ySymmetry=function(t){return this.transform(v.Y_AXIS_SYMMETRY(t))},t.prototype.annotateArcs=function(){return this.transform(v.ANNOTATE_ARCS())},t}(),A=function(t){return" "===t||"\t"===t||"\r"===t||"\n"===t},O=function(t){return"0".charCodeAt(0)<=t.charCodeAt(0)&&t.charCodeAt(0)<="9".charCodeAt(0)},P=function(t){function e(){var e=t.call(this)||this;return e.curNumber="",e.curCommandType=-1,e.curCommandRelative=!1,e.canParseCommandOrComma=!0,e.curNumberHasExp=!1,e.curNumberHasExpDigits=!1,e.curNumberHasDecimal=!1,e.curArgs=[],e}return l(e,t),e.prototype.finish=function(t){if(void 0===t&&(t=[]),this.parse(" ",t),0!==this.curArgs.length||!this.canParseCommandOrComma)throw new SyntaxError("Unterminated command at the path end.");return t},e.prototype.parse=function(t,e){var r=this;void 0===e&&(e=[]);for(var i=function(t){e.push(t),r.curArgs.length=0,r.canParseCommandOrComma=!0},n=0;n<t.length;n++){var a=t[n],s=!(this.curCommandType!==E.ARC||3!==this.curArgs.length&&4!==this.curArgs.length||1!==this.curNumber.length||"0"!==this.curNumber&&"1"!==this.curNumber),o=O(a)&&("0"===this.curNumber&&"0"===a||s);if(!O(a)||o)if("e"!==a&&"E"!==a)if("-"!==a&&"+"!==a||!this.curNumberHasExp||this.curNumberHasExpDigits)if("."!==a||this.curNumberHasExp||this.curNumberHasDecimal||s){if(this.curNumber&&-1!==this.curCommandType){var h=Number(this.curNumber);if(isNaN(h))throw new SyntaxError("Invalid number ending at "+n);if(this.curCommandType===E.ARC)if(0===this.curArgs.length||1===this.curArgs.length){if(0>h)throw new SyntaxError('Expected positive number, got "'+h+'" at index "'+n+'"')}else if((3===this.curArgs.length||4===this.curArgs.length)&&"0"!==this.curNumber&&"1"!==this.curNumber)throw new SyntaxError('Expected a flag, got "'+this.curNumber+'" at index "'+n+'"');this.curArgs.push(h),this.curArgs.length===C[this.curCommandType]&&(E.HORIZ_LINE_TO===this.curCommandType?i({type:E.HORIZ_LINE_TO,relative:this.curCommandRelative,x:h}):E.VERT_LINE_TO===this.curCommandType?i({type:E.VERT_LINE_TO,relative:this.curCommandRelative,y:h}):this.curCommandType===E.MOVE_TO||this.curCommandType===E.LINE_TO||this.curCommandType===E.SMOOTH_QUAD_TO?(i({type:this.curCommandType,relative:this.curCommandRelative,x:this.curArgs[0],y:this.curArgs[1]}),E.MOVE_TO===this.curCommandType&&(this.curCommandType=E.LINE_TO)):this.curCommandType===E.CURVE_TO?i({type:E.CURVE_TO,relative:this.curCommandRelative,x1:this.curArgs[0],y1:this.curArgs[1],x2:this.curArgs[2],y2:this.curArgs[3],x:this.curArgs[4],y:this.curArgs[5]}):this.curCommandType===E.SMOOTH_CURVE_TO?i({type:E.SMOOTH_CURVE_TO,relative:this.curCommandRelative,x2:this.curArgs[0],y2:this.curArgs[1],x:this.curArgs[2],y:this.curArgs[3]}):this.curCommandType===E.QUAD_TO?i({type:E.QUAD_TO,relative:this.curCommandRelative,x1:this.curArgs[0],y1:this.curArgs[1],x:this.curArgs[2],y:this.curArgs[3]}):this.curCommandType===E.ARC&&i({type:E.ARC,relative:this.curCommandRelative,rX:this.curArgs[0],rY:this.curArgs[1],xRot:this.curArgs[2],lArcFlag:this.curArgs[3],sweepFlag:this.curArgs[4],x:this.curArgs[5],y:this.curArgs[6]})),this.curNumber="",this.curNumberHasExpDigits=!1,this.curNumberHasExp=!1,this.curNumberHasDecimal=!1,this.canParseCommandOrComma=!0}if(!A(a))if(","===a&&this.canParseCommandOrComma)this.canParseCommandOrComma=!1;else if("+"!==a&&"-"!==a&&"."!==a)if(o)this.curNumber=a,this.curNumberHasDecimal=!1;else{if(0!==this.curArgs.length)throw new SyntaxError("Unterminated command at index "+n+".");if(!this.canParseCommandOrComma)throw new SyntaxError('Unexpected character "'+a+'" at index '+n+". Command cannot follow comma");if(this.canParseCommandOrComma=!1,"z"!==a&&"Z"!==a)if("h"===a||"H"===a)this.curCommandType=E.HORIZ_LINE_TO,this.curCommandRelative="h"===a;else if("v"===a||"V"===a)this.curCommandType=E.VERT_LINE_TO,this.curCommandRelative="v"===a;else if("m"===a||"M"===a)this.curCommandType=E.MOVE_TO,this.curCommandRelative="m"===a;else if("l"===a||"L"===a)this.curCommandType=E.LINE_TO,this.curCommandRelative="l"===a;else if("c"===a||"C"===a)this.curCommandType=E.CURVE_TO,this.curCommandRelative="c"===a;else if("s"===a||"S"===a)this.curCommandType=E.SMOOTH_CURVE_TO,this.curCommandRelative="s"===a;else if("q"===a||"Q"===a)this.curCommandType=E.QUAD_TO,this.curCommandRelative="q"===a;else if("t"===a||"T"===a)this.curCommandType=E.SMOOTH_QUAD_TO,this.curCommandRelative="t"===a;else{if("a"!==a&&"A"!==a)throw new SyntaxError('Unexpected character "'+a+'" at index '+n+".");this.curCommandType=E.ARC,this.curCommandRelative="a"===a}else e.push({type:E.CLOSE_PATH}),this.canParseCommandOrComma=!0,this.curCommandType=-1}else this.curNumber=a,this.curNumberHasDecimal="."===a}else this.curNumber+=a,this.curNumberHasDecimal=!0;else this.curNumber+=a;else this.curNumber+=a,this.curNumberHasExp=!0;else this.curNumber+=a,this.curNumberHasExpDigits=this.curNumberHasExp}return e},e.prototype.transform=function(t){return Object.create(this,{parse:{value:function(e,r){void 0===r&&(r=[]);for(var i=0,n=Object.getPrototypeOf(this).parse.call(this,e);i<n.length;i++){var a=n[i],s=t(a);Array.isArray(s)?r.push.apply(r,s):r.push(s)}return r}}})},e}(T),E=function(t){function e(r){var i=t.call(this)||this;return i.commands="string"==typeof r?e.parse(r):r,i}return l(e,t),e.prototype.encode=function(){return e.encode(this.commands)},e.prototype.getBounds=function(){var t=v.CALCULATE_BOUNDS();return this.transform(t),t},e.prototype.transform=function(t){for(var e=[],r=0,i=this.commands;r<i.length;r++){var n=t(i[r]);Array.isArray(n)?e.push.apply(e,n):e.push(n)}return this.commands=e,this},e.encode=function(t){return function(t){var e="";Array.isArray(t)||(t=[t]);for(var r=0;r<t.length;r++){var i=t[r];if(i.type===E.CLOSE_PATH)e+="z";else if(i.type===E.HORIZ_LINE_TO)e+=(i.relative?"h":"H")+i.x;else if(i.type===E.VERT_LINE_TO)e+=(i.relative?"v":"V")+i.y;else if(i.type===E.MOVE_TO)e+=(i.relative?"m":"M")+i.x+" "+i.y;else if(i.type===E.LINE_TO)e+=(i.relative?"l":"L")+i.x+" "+i.y;else if(i.type===E.CURVE_TO)e+=(i.relative?"c":"C")+i.x1+" "+i.y1+" "+i.x2+" "+i.y2+" "+i.x+" "+i.y;else if(i.type===E.SMOOTH_CURVE_TO)e+=(i.relative?"s":"S")+i.x2+" "+i.y2+" "+i.x+" "+i.y;else if(i.type===E.QUAD_TO)e+=(i.relative?"q":"Q")+i.x1+" "+i.y1+" "+i.x+" "+i.y;else if(i.type===E.SMOOTH_QUAD_TO)e+=(i.relative?"t":"T")+i.x+" "+i.y;else{if(i.type!==E.ARC)throw new Error('Unexpected command type "'+i.type+'" at index '+r+".");e+=(i.relative?"a":"A")+i.rX+" "+i.rY+" "+i.xRot+" "+ +i.lArcFlag+" "+ +i.sweepFlag+" "+i.x+" "+i.y}}return e}(t)},e.parse=function(t){var e=new P,r=[];return e.parse(t,r),e.finish(r),r},e.CLOSE_PATH=1,e.MOVE_TO=2,e.HORIZ_LINE_TO=4,e.VERT_LINE_TO=8,e.LINE_TO=16,e.CURVE_TO=32,e.SMOOTH_CURVE_TO=64,e.QUAD_TO=128,e.SMOOTH_QUAD_TO=256,e.ARC=512,e.LINE_COMMANDS=e.LINE_TO|e.HORIZ_LINE_TO|e.VERT_LINE_TO,e.DRAWING_COMMANDS=e.HORIZ_LINE_TO|e.VERT_LINE_TO|e.LINE_TO|e.CURVE_TO|e.SMOOTH_CURVE_TO|e.QUAD_TO|e.SMOOTH_QUAD_TO|e.ARC,e}(T),C=((w={})[E.MOVE_TO]=2,w[E.LINE_TO]=2,w[E.HORIZ_LINE_TO]=1,w[E.VERT_LINE_TO]=1,w[E.CLOSE_PATH]=0,w[E.QUAD_TO]=4,w[E.SMOOTH_QUAD_TO]=2,w[E.CURVE_TO]=6,w[E.SMOOTH_CURVE_TO]=4,w[E.ARC]=7,w);function M(t){return M="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},M(t)}r(9714);var N=[512,512,456,512,328,456,335,512,405,328,271,456,388,335,292,512,454,405,364,328,298,271,496,456,420,388,360,335,312,292,273,512,482,454,428,405,383,364,345,328,312,298,284,271,259,496,475,456,437,420,404,388,374,360,347,335,323,312,302,292,282,273,265,512,497,482,468,454,441,428,417,405,394,383,373,364,354,345,337,328,320,312,305,298,291,284,278,271,265,259,507,496,485,475,465,456,446,437,428,420,412,404,396,388,381,374,367,360,354,347,341,335,329,323,318,312,307,302,297,292,287,282,278,273,269,265,261,512,505,497,489,482,475,468,461,454,447,441,435,428,422,417,411,405,399,394,389,383,378,373,368,364,359,354,350,345,341,337,332,328,324,320,316,312,309,305,301,298,294,291,287,284,281,278,274,271,268,265,262,259,257,507,501,496,491,485,480,475,470,465,460,456,451,446,442,437,433,428,424,420,416,412,408,404,400,396,392,388,385,381,377,374,370,367,363,360,357,354,350,347,344,341,338,335,332,329,326,323,320,318,315,312,310,307,304,302,299,297,294,292,289,287,285,282,280,278,275,273,271,269,267,265,263,261,259],_=[9,11,12,13,13,14,14,15,15,15,15,16,16,16,16,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24];function V(t,e,r,i,n,a){if(!(isNaN(a)||a<1)){a|=0;var s=function(t,e,r,i,n){if("string"==typeof t&&(t=document.getElementById(t)),!t||"object"!==M(t)||!("getContext"in t))throw new TypeError("Expecting canvas with `getContext` method in processCanvasRGB(A) calls!");var a=t.getContext("2d");try{return a.getImageData(e,r,i,n)}catch(t){throw new Error("unable to access image data: "+t)}}(t,e,r,i,n);s=function(t,e,r,i,n,a){for(var s,o=t.data,h=2*a+1,u=i-1,l=n-1,c=a+1,g=c*(c+1)/2,f=new R,p=f,d=1;d<h;d++)p=p.next=new R,d===c&&(s=p);p.next=f;for(var v=null,y=null,m=0,x=0,b=N[a],S=_[a],w=0;w<n;w++){p=f;for(var T=o[x],A=o[x+1],O=o[x+2],P=o[x+3],E=0;E<c;E++)p.r=T,p.g=A,p.b=O,p.a=P,p=p.next;for(var C=0,M=0,V=0,k=0,I=c*T,L=c*A,D=c*O,B=c*P,j=g*T,z=g*A,F=g*O,U=g*P,H=1;H<c;H++){var X=x+((u<H?u:H)<<2),Y=o[X],q=o[X+1],W=o[X+2],G=o[X+3],Q=c-H;j+=(p.r=Y)*Q,z+=(p.g=q)*Q,F+=(p.b=W)*Q,U+=(p.a=G)*Q,C+=Y,M+=q,V+=W,k+=G,p=p.next}v=f,y=s;for(var $=0;$<i;$++){var Z=U*b>>S;if(o[x+3]=Z,0!==Z){var K=255/Z;o[x]=(j*b>>S)*K,o[x+1]=(z*b>>S)*K,o[x+2]=(F*b>>S)*K}else o[x]=o[x+1]=o[x+2]=0;j-=I,z-=L,F-=D,U-=B,I-=v.r,L-=v.g,D-=v.b,B-=v.a;var J=$+a+1;J=m+(J<u?J:u)<<2,j+=C+=v.r=o[J],z+=M+=v.g=o[J+1],F+=V+=v.b=o[J+2],U+=k+=v.a=o[J+3],v=v.next;var tt=y,et=tt.r,rt=tt.g,it=tt.b,nt=tt.a;I+=et,L+=rt,D+=it,B+=nt,C-=et,M-=rt,V-=it,k-=nt,y=y.next,x+=4}m+=i}for(var at=0;at<i;at++){var st=o[x=at<<2],ot=o[x+1],ht=o[x+2],ut=o[x+3],lt=c*st,ct=c*ot,gt=c*ht,ft=c*ut,pt=g*st,dt=g*ot,vt=g*ht,yt=g*ut;p=f;for(var mt=0;mt<c;mt++)p.r=st,p.g=ot,p.b=ht,p.a=ut,p=p.next;for(var xt=i,bt=0,St=0,wt=0,Tt=0,At=1;At<=a;At++){x=xt+at<<2;var Ot=c-At;pt+=(p.r=st=o[x])*Ot,dt+=(p.g=ot=o[x+1])*Ot,vt+=(p.b=ht=o[x+2])*Ot,yt+=(p.a=ut=o[x+3])*Ot,Tt+=st,bt+=ot,St+=ht,wt+=ut,p=p.next,At<l&&(xt+=i)}x=at,v=f,y=s;for(var Pt=0;Pt<n;Pt++){var Et=x<<2;o[Et+3]=ut=yt*b>>S,ut>0?(ut=255/ut,o[Et]=(pt*b>>S)*ut,o[Et+1]=(dt*b>>S)*ut,o[Et+2]=(vt*b>>S)*ut):o[Et]=o[Et+1]=o[Et+2]=0,pt-=lt,dt-=ct,vt-=gt,yt-=ft,lt-=v.r,ct-=v.g,gt-=v.b,ft-=v.a,Et=at+((Et=Pt+c)<l?Et:l)*i<<2,pt+=Tt+=v.r=o[Et],dt+=bt+=v.g=o[Et+1],vt+=St+=v.b=o[Et+2],yt+=wt+=v.a=o[Et+3],v=v.next,lt+=st=y.r,ct+=ot=y.g,gt+=ht=y.b,ft+=ut=y.a,Tt-=st,bt-=ot,St-=ht,wt-=ut,y=y.next,x+=i}}return t}(s,0,0,i,n,a),t.getContext("2d").putImageData(s,e,r)}}var R=function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.r=0,this.g=0,this.b=0,this.a=0,this.next=null},k=r(2702),I=Object.freeze({__proto__:null,offscreen:function(){var{DOMParser:t}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e={window:null,ignoreAnimation:!0,ignoreMouse:!0,DOMParser:t,createCanvas:(t,e)=>new OffscreenCanvas(t,e),createImage:t=>a((function*(){var e=yield fetch(t),r=yield e.blob();return yield createImageBitmap(r)}))()};return"undefined"==typeof DOMParser&&void 0!==t||Reflect.deleteProperty(e,"DOMParser"),e},node:function(t){var{DOMParser:e,canvas:r,fetch:i}=t;return{window:null,ignoreAnimation:!0,ignoreMouse:!0,DOMParser:e,fetch:i,createCanvas:r.createCanvas,createImage:r.loadImage}}});function L(t){return t.replace(/(?!\u3000)\s+/gm," ")}function D(t){return t.replace(/^[\n \t]+/,"")}function B(t){return t.replace(/[\n \t]+$/,"")}function j(t){return((t||"").match(/-?(\d+(?:\.\d*(?:[eE][+-]?\d+)?)?|\.\d+)(?=\D|$)/gm)||[]).map(parseFloat)}var z=/^[A-Z-]+$/;function F(t){return z.test(t)?t.toLowerCase():t}function U(t){var e=/url\(('([^']+)'|"([^"]+)"|([^'")]+))\)/.exec(t)||[];return e[2]||e[3]||e[4]}function H(t){if(!t.startsWith("rgb"))return t;var e=3;return t.replace(/\d+(\.\d+)?/g,((t,r)=>e--&&r?String(Math.round(parseFloat(t))):t))}var X=/(\[[^\]]+\])/g,Y=/(#[^\s+>~.[:]+)/g,q=/(\.[^\s+>~.[:]+)/g,W=/(::[^\s+>~.[:]+|:first-line|:first-letter|:before|:after)/gi,G=/(:[\w-]+\([^)]*\))/gi,Q=/(:[^\s+>~.[:]+)/g,$=/([^\s+>~.[:]+)/g;function Z(t,e){var r=e.exec(t);return r?[t.replace(e," "),r.length]:[t,0]}function K(t){var e=[0,0,0],r=t.replace(/:not\(([^)]*)\)/g,"     $1 ").replace(/{[\s\S]*/gm," "),i=0;return[r,i]=Z(r,X),e[1]+=i,[r,i]=Z(r,Y),e[0]+=i,[r,i]=Z(r,q),e[1]+=i,[r,i]=Z(r,W),e[2]+=i,[r,i]=Z(r,G),e[1]+=i,[r,i]=Z(r,Q),e[1]+=i,r=r.replace(/[*\s+>~]/g," ").replace(/[#.]/g," "),[r,i]=Z(r,$),e[2]+=i,e.join("")}var J=1e-8;function tt(t){return Math.sqrt(Math.pow(t[0],2)+Math.pow(t[1],2))}function et(t,e){return(t[0]*e[0]+t[1]*e[1])/(tt(t)*tt(e))}function rt(t,e){return(t[0]*e[1]<t[1]*e[0]?-1:1)*Math.acos(et(t,e))}function it(t){return t*t*t}function nt(t){return 3*t*t*(1-t)}function at(t){return 3*t*(1-t)*(1-t)}function st(t){return(1-t)*(1-t)*(1-t)}function ot(t){return t*t}function ht(t){return 2*t*(1-t)}function ut(t){return(1-t)*(1-t)}class lt{constructor(t,e,r){this.document=t,this.name=e,this.value=r,this.isNormalizedColor=!1}static empty(t){return new lt(t,"EMPTY","")}split(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:" ",{document:e,name:r}=this;return L(this.getString()).trim().split(t).map((t=>new lt(e,r,t)))}hasValue(t){var{value:e}=this;return null!==e&&""!==e&&(t||0!==e)&&void 0!==e}isString(t){var{value:e}=this,r="string"==typeof e;return r&&t?t.test(e):r}isUrlDefinition(){return this.isString(/^url\(/)}isPixels(){if(!this.hasValue())return!1;var t=this.getString();switch(!0){case t.endsWith("px"):case/^[0-9]+$/.test(t):return!0;default:return!1}}setValue(t){return this.value=t,this}getValue(t){return void 0===t||this.hasValue()?this.value:t}getNumber(t){if(!this.hasValue())return void 0===t?0:parseFloat(t);var{value:e}=this,r=parseFloat(e);return this.isString(/%$/)&&(r/=100),r}getString(t){return void 0===t||this.hasValue()?void 0===this.value?"":String(this.value):String(t)}getColor(t){var e=this.getString(t);return this.isNormalizedColor||(this.isNormalizedColor=!0,e=H(e),this.value=e),e}getDpi(){return 96}getRem(){return this.document.rootEmSize}getEm(){return this.document.emSize}getUnits(){return this.getString().replace(/[0-9.-]/g,"")}getPixels(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(!this.hasValue())return 0;var[r,i]="boolean"==typeof t?[void 0,t]:[t],{viewPort:n}=this.document.screen;switch(!0){case this.isString(/vmin$/):return this.getNumber()/100*Math.min(n.computeSize("x"),n.computeSize("y"));case this.isString(/vmax$/):return this.getNumber()/100*Math.max(n.computeSize("x"),n.computeSize("y"));case this.isString(/vw$/):return this.getNumber()/100*n.computeSize("x");case this.isString(/vh$/):return this.getNumber()/100*n.computeSize("y");case this.isString(/rem$/):return this.getNumber()*this.getRem();case this.isString(/em$/):return this.getNumber()*this.getEm();case this.isString(/ex$/):return this.getNumber()*this.getEm()/2;case this.isString(/px$/):return this.getNumber();case this.isString(/pt$/):return this.getNumber()*this.getDpi()*(1/72);case this.isString(/pc$/):return 15*this.getNumber();case this.isString(/cm$/):return this.getNumber()*this.getDpi()/2.54;case this.isString(/mm$/):return this.getNumber()*this.getDpi()/25.4;case this.isString(/in$/):return this.getNumber()*this.getDpi();case this.isString(/%$/)&&i:return this.getNumber()*this.getEm();case this.isString(/%$/):return this.getNumber()*n.computeSize(r);default:var a=this.getNumber();return e&&a<1?a*n.computeSize(r):a}}getMilliseconds(){return this.hasValue()?this.isString(/ms$/)?this.getNumber():1e3*this.getNumber():0}getRadians(){if(!this.hasValue())return 0;switch(!0){case this.isString(/deg$/):return this.getNumber()*(Math.PI/180);case this.isString(/grad$/):return this.getNumber()*(Math.PI/200);case this.isString(/rad$/):return this.getNumber();default:return this.getNumber()*(Math.PI/180)}}getDefinition(){var t=this.getString(),e=/#([^)'"]+)/.exec(t);return e&&(e=e[1]),e||(e=t),this.document.definitions[e]}getFillStyleDefinition(t,e){var r=this.getDefinition();if(!r)return null;if("function"==typeof r.createGradient)return r.createGradient(this.document.ctx,t,e);if("function"==typeof r.createPattern){if(r.getHrefAttribute().hasValue()){var i=r.getAttribute("patternTransform");r=r.getHrefAttribute().getDefinition(),i.hasValue()&&r.getAttribute("patternTransform",!0).setValue(i.value)}return r.createPattern(this.document.ctx,t,e)}return null}getTextBaseline(){return this.hasValue()?lt.textBaselineMapping[this.getString()]:null}addOpacity(t){for(var e=this.getColor(),r=e.length,i=0,n=0;n<r&&(","===e[n]&&i++,3!==i);n++);if(t.hasValue()&&this.isString()&&3!==i){var a=new h(e);a.ok&&(a.alpha=t.getNumber(),e=a.toRGBA())}return new lt(this.document,this.name,e)}}lt.textBaselineMapping={baseline:"alphabetic","before-edge":"top","text-before-edge":"top",middle:"middle",central:"middle","after-edge":"bottom","text-after-edge":"bottom",ideographic:"ideographic",alphabetic:"alphabetic",hanging:"hanging",mathematical:"alphabetic"};class ct{constructor(){this.viewPorts=[]}clear(){this.viewPorts=[]}setCurrent(t,e){this.viewPorts.push({width:t,height:e})}removeCurrent(){this.viewPorts.pop()}getCurrent(){var{viewPorts:t}=this;return t[t.length-1]}get width(){return this.getCurrent().width}get height(){return this.getCurrent().height}computeSize(t){return"number"==typeof t?t:"x"===t?this.width:"y"===t?this.height:Math.sqrt(Math.pow(this.width,2)+Math.pow(this.height,2))/Math.sqrt(2)}}class gt{constructor(t,e){this.x=t,this.y=e}static parse(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,[r=e,i=e]=j(t);return new gt(r,i)}static parseScale(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,[r=e,i=r]=j(t);return new gt(r,i)}static parsePath(t){for(var e=j(t),r=e.length,i=[],n=0;n<r;n+=2)i.push(new gt(e[n],e[n+1]));return i}angleTo(t){return Math.atan2(t.y-this.y,t.x-this.x)}applyTransform(t){var{x:e,y:r}=this,i=e*t[0]+r*t[2]+t[4],n=e*t[1]+r*t[3]+t[5];this.x=i,this.y=n}}class ft{constructor(t){this.screen=t,this.working=!1,this.events=[],this.eventElements=[],this.onClick=this.onClick.bind(this),this.onMouseMove=this.onMouseMove.bind(this)}isWorking(){return this.working}start(){if(!this.working){var{screen:t,onClick:e,onMouseMove:r}=this,i=t.ctx.canvas;i.onclick=e,i.onmousemove=r,this.working=!0}}stop(){if(this.working){var t=this.screen.ctx.canvas;this.working=!1,t.onclick=null,t.onmousemove=null}}hasEvents(){return this.working&&this.events.length>0}runEvents(){if(this.working){var{screen:t,events:e,eventElements:r}=this,{style:i}=t.ctx.canvas;i&&(i.cursor=""),e.forEach(((t,e)=>{for(var{run:i}=t,n=r[e];n;)i(n),n=n.parent})),this.events=[],this.eventElements=[]}}checkPath(t,e){if(this.working&&e){var{events:r,eventElements:i}=this;r.forEach(((r,n)=>{var{x:a,y:s}=r;!i[n]&&e.isPointInPath&&e.isPointInPath(a,s)&&(i[n]=t)}))}}checkBoundingBox(t,e){if(this.working&&e){var{events:r,eventElements:i}=this;r.forEach(((r,n)=>{var{x:a,y:s}=r;!i[n]&&e.isPointInBox(a,s)&&(i[n]=t)}))}}mapXY(t,e){for(var{window:r,ctx:i}=this.screen,n=new gt(t,e),a=i.canvas;a;)n.x-=a.offsetLeft,n.y-=a.offsetTop,a=a.offsetParent;return r.scrollX&&(n.x+=r.scrollX),r.scrollY&&(n.y+=r.scrollY),n}onClick(t){var{x:e,y:r}=this.mapXY(t.clientX,t.clientY);this.events.push({type:"onclick",x:e,y:r,run(t){t.onClick&&t.onClick()}})}onMouseMove(t){var{x:e,y:r}=this.mapXY(t.clientX,t.clientY);this.events.push({type:"onmousemove",x:e,y:r,run(t){t.onMouseMove&&t.onMouseMove()}})}}var pt="undefined"!=typeof window?window:null,dt="undefined"!=typeof fetch?fetch.bind(void 0):null;class vt{constructor(t){var{fetch:e=dt,window:r=pt}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.ctx=t,this.FRAMERATE=30,this.MAX_VIRTUAL_PIXELS=3e4,this.CLIENT_WIDTH=800,this.CLIENT_HEIGHT=600,this.viewPort=new ct,this.mouse=new ft(this),this.animations=[],this.waits=[],this.frameDuration=0,this.isReadyLock=!1,this.isFirstRender=!0,this.intervalId=null,this.window=r,this.fetch=e}wait(t){this.waits.push(t)}ready(){return this.readyPromise?this.readyPromise:k.resolve()}isReady(){if(this.isReadyLock)return!0;var t=this.waits.every((t=>t()));return t&&(this.waits=[],this.resolveReady&&this.resolveReady()),this.isReadyLock=t,t}setDefaults(t){t.strokeStyle="rgba(0,0,0,0)",t.lineCap="butt",t.lineJoin="miter",t.miterLimit=4}setViewBox(t){var{document:e,ctx:r,aspectRatio:i,width:n,desiredWidth:a,height:s,desiredHeight:o,minX:h=0,minY:u=0,refX:l,refY:c,clip:g=!1,clipX:f=0,clipY:p=0}=t,d=L(i).replace(/^defer\s/,""),[v,y]=d.split(" "),m=v||"xMidYMid",x=y||"meet",b=n/a,S=s/o,w=Math.min(b,S),T=Math.max(b,S),A=a,O=o;"meet"===x&&(A*=w,O*=w),"slice"===x&&(A*=T,O*=T);var P=new lt(e,"refX",l),E=new lt(e,"refY",c),C=P.hasValue()&&E.hasValue();if(C&&r.translate(-w*P.getPixels("x"),-w*E.getPixels("y")),g){var M=w*f,N=w*p;r.beginPath(),r.moveTo(M,N),r.lineTo(n,N),r.lineTo(n,s),r.lineTo(M,s),r.closePath(),r.clip()}if(!C){var _="meet"===x&&w===S,V="slice"===x&&T===S,R="meet"===x&&w===b,k="slice"===x&&T===b;m.startsWith("xMid")&&(_||V)&&r.translate(n/2-A/2,0),m.endsWith("YMid")&&(R||k)&&r.translate(0,s/2-O/2),m.startsWith("xMax")&&(_||V)&&r.translate(n-A,0),m.endsWith("YMax")&&(R||k)&&r.translate(0,s-O)}switch(!0){case"none"===m:r.scale(b,S);break;case"meet"===x:r.scale(w,w);break;case"slice"===x:r.scale(T,T)}r.translate(-h,-u)}start(t){var{enableRedraw:e=!1,ignoreMouse:r=!1,ignoreAnimation:i=!1,ignoreDimensions:n=!1,ignoreClear:a=!1,forceRedraw:s,scaleWidth:h,scaleHeight:u,offsetX:l,offsetY:c}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{FRAMERATE:g,mouse:f}=this,p=1e3/g;if(this.frameDuration=p,this.readyPromise=new k((t=>{this.resolveReady=t})),this.isReady()&&this.render(t,n,a,h,u,l,c),e){var d=Date.now(),v=d,y=0,m=()=>{d=Date.now(),(y=d-v)>=p&&(v=d-y%p,this.shouldUpdate(i,s)&&(this.render(t,n,a,h,u,l,c),f.runEvents())),this.intervalId=o(m)};r||f.start(),this.intervalId=o(m)}}stop(){this.intervalId&&(o.cancel(this.intervalId),this.intervalId=null),this.mouse.stop()}shouldUpdate(t,e){if(!t){var{frameDuration:r}=this;if(this.animations.reduce(((t,e)=>e.update(r)||t),!1))return!0}return!("function"!=typeof e||!e())||!(this.isReadyLock||!this.isReady())||!!this.mouse.hasEvents()}render(t,e,r,i,n,a,s){var{CLIENT_WIDTH:o,CLIENT_HEIGHT:h,viewPort:u,ctx:l,isFirstRender:c}=this,g=l.canvas;u.clear(),g.width&&g.height?u.setCurrent(g.width,g.height):u.setCurrent(o,h);var f=t.getStyle("width"),p=t.getStyle("height");!e&&(c||"number"!=typeof i&&"number"!=typeof n)&&(f.hasValue()&&(g.width=f.getPixels("x"),g.style&&(g.style.width="".concat(g.width,"px"))),p.hasValue()&&(g.height=p.getPixels("y"),g.style&&(g.style.height="".concat(g.height,"px"))));var d=g.clientWidth||g.width,v=g.clientHeight||g.height;if(e&&f.hasValue()&&p.hasValue()&&(d=f.getPixels("x"),v=p.getPixels("y")),u.setCurrent(d,v),"number"==typeof a&&t.getAttribute("x",!0).setValue(a),"number"==typeof s&&t.getAttribute("y",!0).setValue(s),"number"==typeof i||"number"==typeof n){var y=j(t.getAttribute("viewBox").getString()),m=0,x=0;if("number"==typeof i){var b=t.getStyle("width");b.hasValue()?m=b.getPixels("x")/i:isNaN(y[2])||(m=y[2]/i)}if("number"==typeof n){var S=t.getStyle("height");S.hasValue()?x=S.getPixels("y")/n:isNaN(y[3])||(x=y[3]/n)}m||(m=x),x||(x=m),t.getAttribute("width",!0).setValue(i),t.getAttribute("height",!0).setValue(n);var w=t.getStyle("transform",!0,!0);w.setValue("".concat(w.getString()," scale(").concat(1/m,", ").concat(1/x,")"))}r||l.clearRect(0,0,d,v),t.render(l),c&&(this.isFirstRender=!1)}}vt.defaultWindow=pt,vt.defaultFetch=dt;var{defaultFetch:yt}=vt,mt="undefined"!=typeof DOMParser?DOMParser:null;class xt{constructor(){var{fetch:t=yt,DOMParser:e=mt}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.fetch=t,this.DOMParser=e}parse(t){var e=this;return a((function*(){return t.startsWith("<")?e.parseFromString(t):e.load(t)}))()}parseFromString(t){var e=new this.DOMParser;try{return this.checkDocument(e.parseFromString(t,"image/svg+xml"))}catch(r){return this.checkDocument(e.parseFromString(t,"text/xml"))}}checkDocument(t){var e=t.getElementsByTagName("parsererror")[0];if(e)throw new Error(e.textContent);return t}load(t){var e=this;return a((function*(){var r=yield e.fetch(t),i=yield r.text();return e.parseFromString(i)}))()}}class bt{constructor(t,e){this.type="translate",this.point=null,this.point=gt.parse(e)}apply(t){var{x:e,y:r}=this.point;t.translate(e||0,r||0)}unapply(t){var{x:e,y:r}=this.point;t.translate(-1*e||0,-1*r||0)}applyToPoint(t){var{x:e,y:r}=this.point;t.applyTransform([1,0,0,1,e||0,r||0])}}class St{constructor(t,e,r){this.type="rotate",this.angle=null,this.originX=null,this.originY=null,this.cx=0,this.cy=0;var i=j(e);this.angle=new lt(t,"angle",i[0]),this.originX=r[0],this.originY=r[1],this.cx=i[1]||0,this.cy=i[2]||0}apply(t){var{cx:e,cy:r,originX:i,originY:n,angle:a}=this,s=e+i.getPixels("x"),o=r+n.getPixels("y");t.translate(s,o),t.rotate(a.getRadians()),t.translate(-s,-o)}unapply(t){var{cx:e,cy:r,originX:i,originY:n,angle:a}=this,s=e+i.getPixels("x"),o=r+n.getPixels("y");t.translate(s,o),t.rotate(-1*a.getRadians()),t.translate(-s,-o)}applyToPoint(t){var{cx:e,cy:r,angle:i}=this,n=i.getRadians();t.applyTransform([1,0,0,1,e||0,r||0]),t.applyTransform([Math.cos(n),Math.sin(n),-Math.sin(n),Math.cos(n),0,0]),t.applyTransform([1,0,0,1,-e||0,-r||0])}}class wt{constructor(t,e,r){this.type="scale",this.scale=null,this.originX=null,this.originY=null;var i=gt.parseScale(e);0!==i.x&&0!==i.y||(i.x=J,i.y=J),this.scale=i,this.originX=r[0],this.originY=r[1]}apply(t){var{scale:{x:e,y:r},originX:i,originY:n}=this,a=i.getPixels("x"),s=n.getPixels("y");t.translate(a,s),t.scale(e,r||e),t.translate(-a,-s)}unapply(t){var{scale:{x:e,y:r},originX:i,originY:n}=this,a=i.getPixels("x"),s=n.getPixels("y");t.translate(a,s),t.scale(1/e,1/r||e),t.translate(-a,-s)}applyToPoint(t){var{x:e,y:r}=this.scale;t.applyTransform([e||0,0,0,r||0,0,0])}}class Tt{constructor(t,e,r){this.type="matrix",this.matrix=[],this.originX=null,this.originY=null,this.matrix=j(e),this.originX=r[0],this.originY=r[1]}apply(t){var{originX:e,originY:r,matrix:i}=this,n=e.getPixels("x"),a=r.getPixels("y");t.translate(n,a),t.transform(i[0],i[1],i[2],i[3],i[4],i[5]),t.translate(-n,-a)}unapply(t){var{originX:e,originY:r,matrix:i}=this,n=i[0],a=i[2],s=i[4],o=i[1],h=i[3],u=i[5],l=1/(n*(1*h-0*u)-a*(1*o-0*u)+s*(0*o-0*h)),c=e.getPixels("x"),g=r.getPixels("y");t.translate(c,g),t.transform(l*(1*h-0*u),l*(0*u-1*o),l*(0*s-1*a),l*(1*n-0*s),l*(a*u-s*h),l*(s*o-n*u)),t.translate(-c,-g)}applyToPoint(t){t.applyTransform(this.matrix)}}class At extends Tt{constructor(t,e,r){super(t,e,r),this.type="skew",this.angle=null,this.angle=new lt(t,"angle",e)}}class Ot extends At{constructor(t,e,r){super(t,e,r),this.type="skewX",this.matrix=[1,0,Math.tan(this.angle.getRadians()),1,0,0]}}class Pt extends At{constructor(t,e,r){super(t,e,r),this.type="skewY",this.matrix=[1,Math.tan(this.angle.getRadians()),0,1,0,0]}}class Et{constructor(t,e,r){this.document=t,this.transforms=[];var i=function(t){return L(t).trim().replace(/\)([a-zA-Z])/g,") $1").replace(/\)(\s?,\s?)/g,") ").split(/\s(?=[a-z])/)}(e);i.forEach((t=>{if("none"!==t){var[e,i]=function(t){var[e,r]=t.split("(");return[e.trim(),r.trim().replace(")","")]}(t),n=Et.transformTypes[e];void 0!==n&&this.transforms.push(new n(this.document,i,r))}}))}static fromElement(t,e){var r=e.getStyle("transform",!1,!0),[i,n=i]=e.getStyle("transform-origin",!1,!0).split(),a=[i,n];return r.hasValue()?new Et(t,r.getString(),a):null}apply(t){for(var{transforms:e}=this,r=e.length,i=0;i<r;i++)e[i].apply(t)}unapply(t){for(var{transforms:e}=this,r=e.length-1;r>=0;r--)e[r].unapply(t)}applyToPoint(t){for(var{transforms:e}=this,r=e.length,i=0;i<r;i++)e[i].applyToPoint(t)}}Et.transformTypes={translate:bt,rotate:St,scale:wt,matrix:Tt,skewX:Ot,skewY:Pt};class Ct{constructor(t,e){var r=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(this.document=t,this.node=e,this.captureTextNodes=r,this.attributes={},this.styles={},this.stylesSpecificity={},this.animationFrozen=!1,this.animationFrozenValue="",this.parent=null,this.children=[],e&&1===e.nodeType){if(Array.from(e.attributes).forEach((e=>{var r=F(e.nodeName);this.attributes[r]=new lt(t,r,e.value)})),this.addStylesFromStyleDefinition(),this.getAttribute("style").hasValue()){var i=this.getAttribute("style").getString().split(";").map((t=>t.trim()));i.forEach((e=>{if(e){var[r,i]=e.split(":").map((t=>t.trim()));this.styles[r]=new lt(t,r,i)}}))}var{definitions:n}=t,a=this.getAttribute("id");a.hasValue()&&(n[a.getString()]||(n[a.getString()]=this)),Array.from(e.childNodes).forEach((e=>{if(1===e.nodeType)this.addChild(e);else if(r&&(3===e.nodeType||4===e.nodeType)){var i=t.createTextNode(e);i.getText().length>0&&this.addChild(i)}}))}}getAttribute(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=this.attributes[t];if(!r&&e){var i=new lt(this.document,t,"");return this.attributes[t]=i,i}return r||lt.empty(this.document)}getHrefAttribute(){for(var t in this.attributes)if("href"===t||t.endsWith(":href"))return this.attributes[t];return lt.empty(this.document)}getStyle(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=this.styles[t];if(i)return i;var n=this.getAttribute(t);if(null!=n&&n.hasValue())return this.styles[t]=n,n;if(!r){var{parent:a}=this;if(a){var s=a.getStyle(t);if(null!=s&&s.hasValue())return s}}if(e){var o=new lt(this.document,t,"");return this.styles[t]=o,o}return i||lt.empty(this.document)}render(t){if("none"!==this.getStyle("display").getString()&&"hidden"!==this.getStyle("visibility").getString()){if(t.save(),this.getStyle("mask").hasValue()){var e=this.getStyle("mask").getDefinition();e&&(this.applyEffects(t),e.apply(t,this))}else if("none"!==this.getStyle("filter").getValue("none")){var r=this.getStyle("filter").getDefinition();r&&(this.applyEffects(t),r.apply(t,this))}else this.setContext(t),this.renderChildren(t),this.clearContext(t);t.restore()}}setContext(t){}applyEffects(t){var e=Et.fromElement(this.document,this);e&&e.apply(t);var r=this.getStyle("clip-path",!1,!0);if(r.hasValue()){var i=r.getDefinition();i&&i.apply(t)}}clearContext(t){}renderChildren(t){this.children.forEach((e=>{e.render(t)}))}addChild(t){var e=t instanceof Ct?t:this.document.createElement(t);e.parent=this,Ct.ignoreChildTypes.includes(e.type)||this.children.push(e)}matchesSelector(t){var{node:e}=this;if("function"==typeof e.matches)return e.matches(t);var r=e.getAttribute("class");return!(!r||""===r)&&r.split(" ").some((e=>".".concat(e)===t))}addStylesFromStyleDefinition(){var{styles:t,stylesSpecificity:e}=this.document;for(var r in t)if(!r.startsWith("@")&&this.matchesSelector(r)){var i=t[r],n=e[r];if(i)for(var a in i){var s=this.stylesSpecificity[a];void 0===s&&(s="000"),n>=s&&(this.styles[a]=i[a],this.stylesSpecificity[a]=n)}}}removeStyles(t,e){return e.reduce(((e,r)=>{var i=t.getStyle(r);if(!i.hasValue())return e;var n=i.getString();return i.setValue(""),[...e,[r,n]]}),[])}restoreStyles(t,e){e.forEach((e=>{var[r,i]=e;t.getStyle(r,!0).setValue(i)}))}}Ct.ignoreChildTypes=["title"];class Mt extends Ct{constructor(t,e,r){super(t,e,r)}}function Nt(t){var e=t.trim();return/^('|")/.test(e)?e:'"'.concat(e,'"')}function _t(t){if(!t)return"";var e=t.trim().toLowerCase();switch(e){case"normal":case"italic":case"oblique":case"inherit":case"initial":case"unset":return e;default:return/^oblique\s+(-|)\d+deg$/.test(e)?e:""}}function Vt(t){if(!t)return"";var e=t.trim().toLowerCase();switch(e){case"normal":case"bold":case"lighter":case"bolder":case"inherit":case"initial":case"unset":return e;default:return/^[\d.]+$/.test(e)?e:""}}class Rt{constructor(t,e,r,i,n,a){var s=a?"string"==typeof a?Rt.parse(a):a:{};this.fontFamily=n||s.fontFamily,this.fontSize=i||s.fontSize,this.fontStyle=t||s.fontStyle,this.fontWeight=r||s.fontWeight,this.fontVariant=e||s.fontVariant}static parse(){var t=arguments.length>1?arguments[1]:void 0,e="",r="",i="",n="",a="",s=L(arguments.length>0&&void 0!==arguments[0]?arguments[0]:"").trim().split(" "),o={fontSize:!1,fontStyle:!1,fontWeight:!1,fontVariant:!1};return s.forEach((t=>{switch(!0){case!o.fontStyle&&Rt.styles.includes(t):"inherit"!==t&&(e=t),o.fontStyle=!0;break;case!o.fontVariant&&Rt.variants.includes(t):"inherit"!==t&&(r=t),o.fontStyle=!0,o.fontVariant=!0;break;case!o.fontWeight&&Rt.weights.includes(t):"inherit"!==t&&(i=t),o.fontStyle=!0,o.fontVariant=!0,o.fontWeight=!0;break;case!o.fontSize:"inherit"!==t&&([n]=t.split("/")),o.fontStyle=!0,o.fontVariant=!0,o.fontWeight=!0,o.fontSize=!0;break;default:"inherit"!==t&&(a+=t)}})),new Rt(e,r,i,n,a,t)}toString(){return[_t(this.fontStyle),this.fontVariant,Vt(this.fontWeight),this.fontSize,(t=this.fontFamily,"undefined"==typeof process?t:t.trim().split(",").map(Nt).join(","))].join(" ").trim();var t}}Rt.styles="normal|italic|oblique|inherit",Rt.variants="normal|small-caps|inherit",Rt.weights="normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900|inherit";class kt{constructor(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Number.NaN,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Number.NaN,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Number.NaN,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:Number.NaN;this.x1=t,this.y1=e,this.x2=r,this.y2=i,this.addPoint(t,e),this.addPoint(r,i)}get x(){return this.x1}get y(){return this.y1}get width(){return this.x2-this.x1}get height(){return this.y2-this.y1}addPoint(t,e){void 0!==t&&((isNaN(this.x1)||isNaN(this.x2))&&(this.x1=t,this.x2=t),t<this.x1&&(this.x1=t),t>this.x2&&(this.x2=t)),void 0!==e&&((isNaN(this.y1)||isNaN(this.y2))&&(this.y1=e,this.y2=e),e<this.y1&&(this.y1=e),e>this.y2&&(this.y2=e))}addX(t){this.addPoint(t,null)}addY(t){this.addPoint(null,t)}addBoundingBox(t){if(t){var{x1:e,y1:r,x2:i,y2:n}=t;this.addPoint(e,r),this.addPoint(i,n)}}sumCubic(t,e,r,i,n){return Math.pow(1-t,3)*e+3*Math.pow(1-t,2)*t*r+3*(1-t)*Math.pow(t,2)*i+Math.pow(t,3)*n}bezierCurveAdd(t,e,r,i,n){var a=6*e-12*r+6*i,s=-3*e+9*r-9*i+3*n,o=3*r-3*e;if(0!==s){var h=Math.pow(a,2)-4*o*s;if(!(h<0)){var u=(-a+Math.sqrt(h))/(2*s);0<u&&u<1&&(t?this.addX(this.sumCubic(u,e,r,i,n)):this.addY(this.sumCubic(u,e,r,i,n)));var l=(-a-Math.sqrt(h))/(2*s);0<l&&l<1&&(t?this.addX(this.sumCubic(l,e,r,i,n)):this.addY(this.sumCubic(l,e,r,i,n)))}}else{if(0===a)return;var c=-o/a;0<c&&c<1&&(t?this.addX(this.sumCubic(c,e,r,i,n)):this.addY(this.sumCubic(c,e,r,i,n)))}}addBezierCurve(t,e,r,i,n,a,s,o){this.addPoint(t,e),this.addPoint(s,o),this.bezierCurveAdd(!0,t,r,n,s),this.bezierCurveAdd(!1,e,i,a,o)}addQuadraticCurve(t,e,r,i,n,a){var s=t+2/3*(r-t),o=e+2/3*(i-e),h=s+1/3*(n-t),u=o+1/3*(a-e);this.addBezierCurve(t,e,s,h,o,u,n,a)}isPointInBox(t,e){var{x1:r,y1:i,x2:n,y2:a}=this;return r<=t&&t<=n&&i<=e&&e<=a}}class It extends E{constructor(t){super(t.replace(/([+\-.])\s+/gm,"$1").replace(/[^MmZzLlHhVvCcSsQqTtAae\d\s.,+-].*/g,"")),this.control=null,this.start=null,this.current=null,this.command=null,this.commands=this.commands,this.i=-1,this.previousCommand=null,this.points=[],this.angles=[]}reset(){this.i=-1,this.command=null,this.previousCommand=null,this.start=new gt(0,0),this.control=new gt(0,0),this.current=new gt(0,0),this.points=[],this.angles=[]}isEnd(){var{i:t,commands:e}=this;return t>=e.length-1}next(){var t=this.commands[++this.i];return this.previousCommand=this.command,this.command=t,t}getPoint(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"x",e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"y",r=new gt(this.command[t],this.command[e]);return this.makeAbsolute(r)}getAsControlPoint(t,e){var r=this.getPoint(t,e);return this.control=r,r}getAsCurrentPoint(t,e){var r=this.getPoint(t,e);return this.current=r,r}getReflectedControlPoint(){var t=this.previousCommand.type;if(t!==E.CURVE_TO&&t!==E.SMOOTH_CURVE_TO&&t!==E.QUAD_TO&&t!==E.SMOOTH_QUAD_TO)return this.current;var{current:{x:e,y:r},control:{x:i,y:n}}=this;return new gt(2*e-i,2*r-n)}makeAbsolute(t){if(this.command.relative){var{x:e,y:r}=this.current;t.x+=e,t.y+=r}return t}addMarker(t,e,r){var{points:i,angles:n}=this;r&&n.length>0&&!n[n.length-1]&&(n[n.length-1]=i[i.length-1].angleTo(r)),this.addMarkerAngle(t,e?e.angleTo(t):null)}addMarkerAngle(t,e){this.points.push(t),this.angles.push(e)}getMarkerPoints(){return this.points}getMarkerAngles(){for(var{angles:t}=this,e=t.length,r=0;r<e;r++)if(!t[r])for(var i=r+1;i<e;i++)if(t[i]){t[r]=t[i];break}return t}}class Lt extends Ct{constructor(){super(...arguments),this.modifiedEmSizeStack=!1}calculateOpacity(){for(var t=1,e=this;e;){var r=e.getStyle("opacity",!1,!0);r.hasValue(!0)&&(t*=r.getNumber()),e=e.parent}return t}setContext(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(!e){var r=this.getStyle("fill"),i=this.getStyle("fill-opacity"),n=this.getStyle("stroke"),a=this.getStyle("stroke-opacity");if(r.isUrlDefinition()){var s=r.getFillStyleDefinition(this,i);s&&(t.fillStyle=s)}else if(r.hasValue()){"currentColor"===r.getString()&&r.setValue(this.getStyle("color").getColor());var o=r.getColor();"inherit"!==o&&(t.fillStyle="none"===o?"rgba(0,0,0,0)":o)}if(i.hasValue()){var h=new lt(this.document,"fill",t.fillStyle).addOpacity(i).getColor();t.fillStyle=h}if(n.isUrlDefinition()){var u=n.getFillStyleDefinition(this,a);u&&(t.strokeStyle=u)}else if(n.hasValue()){"currentColor"===n.getString()&&n.setValue(this.getStyle("color").getColor());var l=n.getString();"inherit"!==l&&(t.strokeStyle="none"===l?"rgba(0,0,0,0)":l)}if(a.hasValue()){var c=new lt(this.document,"stroke",t.strokeStyle).addOpacity(a).getString();t.strokeStyle=c}var g=this.getStyle("stroke-width");if(g.hasValue()){var f=g.getPixels();t.lineWidth=f||J}var p=this.getStyle("stroke-linecap"),d=this.getStyle("stroke-linejoin"),v=this.getStyle("stroke-miterlimit"),y=this.getStyle("stroke-dasharray"),m=this.getStyle("stroke-dashoffset");if(p.hasValue()&&(t.lineCap=p.getString()),d.hasValue()&&(t.lineJoin=d.getString()),v.hasValue()&&(t.miterLimit=v.getNumber()),y.hasValue()&&"none"!==y.getString()){var x=j(y.getString());void 0!==t.setLineDash?t.setLineDash(x):void 0!==t.webkitLineDash?t.webkitLineDash=x:void 0===t.mozDash||1===x.length&&0===x[0]||(t.mozDash=x);var b=m.getPixels();void 0!==t.lineDashOffset?t.lineDashOffset=b:void 0!==t.webkitLineDashOffset?t.webkitLineDashOffset=b:void 0!==t.mozDashOffset&&(t.mozDashOffset=b)}}if(this.modifiedEmSizeStack=!1,void 0!==t.font){var S=this.getStyle("font"),w=this.getStyle("font-style"),T=this.getStyle("font-variant"),A=this.getStyle("font-weight"),O=this.getStyle("font-size"),P=this.getStyle("font-family"),E=new Rt(w.getString(),T.getString(),A.getString(),O.hasValue()?"".concat(O.getPixels(!0),"px"):"",P.getString(),Rt.parse(S.getString(),t.font));w.setValue(E.fontStyle),T.setValue(E.fontVariant),A.setValue(E.fontWeight),O.setValue(E.fontSize),P.setValue(E.fontFamily),t.font=E.toString(),O.isPixels()&&(this.document.emSize=O.getPixels(),this.modifiedEmSizeStack=!0)}e||(this.applyEffects(t),t.globalAlpha=this.calculateOpacity())}clearContext(t){super.clearContext(t),this.modifiedEmSizeStack&&this.document.popEmSize()}}class Dt extends Lt{constructor(t,e,r){super(t,e,r),this.type="path",this.pathParser=null,this.pathParser=new It(this.getAttribute("d").getString())}path(t){var{pathParser:e}=this,r=new kt;for(e.reset(),t&&t.beginPath();!e.isEnd();)switch(e.next().type){case It.MOVE_TO:this.pathM(t,r);break;case It.LINE_TO:this.pathL(t,r);break;case It.HORIZ_LINE_TO:this.pathH(t,r);break;case It.VERT_LINE_TO:this.pathV(t,r);break;case It.CURVE_TO:this.pathC(t,r);break;case It.SMOOTH_CURVE_TO:this.pathS(t,r);break;case It.QUAD_TO:this.pathQ(t,r);break;case It.SMOOTH_QUAD_TO:this.pathT(t,r);break;case It.ARC:this.pathA(t,r);break;case It.CLOSE_PATH:this.pathZ(t,r)}return r}getBoundingBox(t){return this.path()}getMarkers(){var{pathParser:t}=this,e=t.getMarkerPoints(),r=t.getMarkerAngles(),i=e.map(((t,e)=>[t,r[e]]));return i}renderChildren(t){this.path(t),this.document.screen.mouse.checkPath(this,t);var e=this.getStyle("fill-rule");""!==t.fillStyle&&("inherit"!==e.getString("inherit")?t.fill(e.getString()):t.fill()),""!==t.strokeStyle&&("non-scaling-stroke"===this.getAttribute("vector-effect").getString()?(t.save(),t.setTransform(1,0,0,1,0,0),t.stroke(),t.restore()):t.stroke());var r=this.getMarkers();if(r){var i=r.length-1,n=this.getStyle("marker-start"),a=this.getStyle("marker-mid"),s=this.getStyle("marker-end");if(n.isUrlDefinition()){var o=n.getDefinition(),[h,u]=r[0];o.render(t,h,u)}if(a.isUrlDefinition())for(var l=a.getDefinition(),c=1;c<i;c++){var[g,f]=r[c];l.render(t,g,f)}if(s.isUrlDefinition()){var p=s.getDefinition(),[d,v]=r[i];p.render(t,d,v)}}}static pathM(t){var e=t.getAsCurrentPoint();return t.start=t.current,{point:e}}pathM(t,e){var{pathParser:r}=this,{point:i}=Dt.pathM(r),{x:n,y:a}=i;r.addMarker(i),e.addPoint(n,a),t&&t.moveTo(n,a)}static pathL(t){var{current:e}=t;return{current:e,point:t.getAsCurrentPoint()}}pathL(t,e){var{pathParser:r}=this,{current:i,point:n}=Dt.pathL(r),{x:a,y:s}=n;r.addMarker(n,i),e.addPoint(a,s),t&&t.lineTo(a,s)}static pathH(t){var{current:e,command:r}=t,i=new gt((r.relative?e.x:0)+r.x,e.y);return t.current=i,{current:e,point:i}}pathH(t,e){var{pathParser:r}=this,{current:i,point:n}=Dt.pathH(r),{x:a,y:s}=n;r.addMarker(n,i),e.addPoint(a,s),t&&t.lineTo(a,s)}static pathV(t){var{current:e,command:r}=t,i=new gt(e.x,(r.relative?e.y:0)+r.y);return t.current=i,{current:e,point:i}}pathV(t,e){var{pathParser:r}=this,{current:i,point:n}=Dt.pathV(r),{x:a,y:s}=n;r.addMarker(n,i),e.addPoint(a,s),t&&t.lineTo(a,s)}static pathC(t){var{current:e}=t;return{current:e,point:t.getPoint("x1","y1"),controlPoint:t.getAsControlPoint("x2","y2"),currentPoint:t.getAsCurrentPoint()}}pathC(t,e){var{pathParser:r}=this,{current:i,point:n,controlPoint:a,currentPoint:s}=Dt.pathC(r);r.addMarker(s,a,n),e.addBezierCurve(i.x,i.y,n.x,n.y,a.x,a.y,s.x,s.y),t&&t.bezierCurveTo(n.x,n.y,a.x,a.y,s.x,s.y)}static pathS(t){var{current:e}=t;return{current:e,point:t.getReflectedControlPoint(),controlPoint:t.getAsControlPoint("x2","y2"),currentPoint:t.getAsCurrentPoint()}}pathS(t,e){var{pathParser:r}=this,{current:i,point:n,controlPoint:a,currentPoint:s}=Dt.pathS(r);r.addMarker(s,a,n),e.addBezierCurve(i.x,i.y,n.x,n.y,a.x,a.y,s.x,s.y),t&&t.bezierCurveTo(n.x,n.y,a.x,a.y,s.x,s.y)}static pathQ(t){var{current:e}=t;return{current:e,controlPoint:t.getAsControlPoint("x1","y1"),currentPoint:t.getAsCurrentPoint()}}pathQ(t,e){var{pathParser:r}=this,{current:i,controlPoint:n,currentPoint:a}=Dt.pathQ(r);r.addMarker(a,n,n),e.addQuadraticCurve(i.x,i.y,n.x,n.y,a.x,a.y),t&&t.quadraticCurveTo(n.x,n.y,a.x,a.y)}static pathT(t){var{current:e}=t,r=t.getReflectedControlPoint();return t.control=r,{current:e,controlPoint:r,currentPoint:t.getAsCurrentPoint()}}pathT(t,e){var{pathParser:r}=this,{current:i,controlPoint:n,currentPoint:a}=Dt.pathT(r);r.addMarker(a,n,n),e.addQuadraticCurve(i.x,i.y,n.x,n.y,a.x,a.y),t&&t.quadraticCurveTo(n.x,n.y,a.x,a.y)}static pathA(t){var{current:e,command:r}=t,{rX:i,rY:n,xRot:a,lArcFlag:s,sweepFlag:o}=r,h=a*(Math.PI/180),u=t.getAsCurrentPoint(),l=new gt(Math.cos(h)*(e.x-u.x)/2+Math.sin(h)*(e.y-u.y)/2,-Math.sin(h)*(e.x-u.x)/2+Math.cos(h)*(e.y-u.y)/2),c=Math.pow(l.x,2)/Math.pow(i,2)+Math.pow(l.y,2)/Math.pow(n,2);c>1&&(i*=Math.sqrt(c),n*=Math.sqrt(c));var g=(s===o?-1:1)*Math.sqrt((Math.pow(i,2)*Math.pow(n,2)-Math.pow(i,2)*Math.pow(l.y,2)-Math.pow(n,2)*Math.pow(l.x,2))/(Math.pow(i,2)*Math.pow(l.y,2)+Math.pow(n,2)*Math.pow(l.x,2)));isNaN(g)&&(g=0);var f=new gt(g*i*l.y/n,g*-n*l.x/i),p=new gt((e.x+u.x)/2+Math.cos(h)*f.x-Math.sin(h)*f.y,(e.y+u.y)/2+Math.sin(h)*f.x+Math.cos(h)*f.y),d=rt([1,0],[(l.x-f.x)/i,(l.y-f.y)/n]),v=[(l.x-f.x)/i,(l.y-f.y)/n],y=[(-l.x-f.x)/i,(-l.y-f.y)/n],m=rt(v,y);return et(v,y)<=-1&&(m=Math.PI),et(v,y)>=1&&(m=0),{currentPoint:u,rX:i,rY:n,sweepFlag:o,xAxisRotation:h,centp:p,a1:d,ad:m}}pathA(t,e){var{pathParser:r}=this,{currentPoint:i,rX:n,rY:a,sweepFlag:s,xAxisRotation:o,centp:h,a1:u,ad:l}=Dt.pathA(r),c=1-s?1:-1,g=u+c*(l/2),f=new gt(h.x+n*Math.cos(g),h.y+a*Math.sin(g));if(r.addMarkerAngle(f,g-c*Math.PI/2),r.addMarkerAngle(i,g-c*Math.PI),e.addPoint(i.x,i.y),t&&!isNaN(u)&&!isNaN(l)){var p=n>a?n:a,d=n>a?1:n/a,v=n>a?a/n:1;t.translate(h.x,h.y),t.rotate(o),t.scale(d,v),t.arc(0,0,p,u,u+l,Boolean(1-s)),t.scale(1/d,1/v),t.rotate(-o),t.translate(-h.x,-h.y)}}static pathZ(t){t.current=t.start}pathZ(t,e){Dt.pathZ(this.pathParser),t&&e.x1!==e.x2&&e.y1!==e.y2&&t.closePath()}}class Bt extends Dt{constructor(t,e,r){super(t,e,r),this.type="glyph",this.horizAdvX=this.getAttribute("horiz-adv-x").getNumber(),this.unicode=this.getAttribute("unicode").getString(),this.arabicForm=this.getAttribute("arabic-form").getString()}}class jt extends Lt{constructor(t,e,r){super(t,e,new.target===jt||r),this.type="text",this.x=0,this.y=0,this.measureCache=-1}setContext(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];super.setContext(t,e);var r=this.getStyle("dominant-baseline").getTextBaseline()||this.getStyle("alignment-baseline").getTextBaseline();r&&(t.textBaseline=r)}initializeCoordinates(t){this.x=this.getAttribute("x").getPixels("x"),this.y=this.getAttribute("y").getPixels("y");var e=this.getAttribute("dx"),r=this.getAttribute("dy");e.hasValue()&&(this.x+=e.getPixels("x")),r.hasValue()&&(this.y+=r.getPixels("y")),this.x+=this.getAnchorDelta(t,this,0)}getBoundingBox(t){if("text"!==this.type)return this.getTElementBoundingBox(t);this.initializeCoordinates(t);var e=null;return this.children.forEach(((r,i)=>{var n=this.getChildBoundingBox(t,this,this,i);e?e.addBoundingBox(n):e=n})),e}getFontSize(){var{document:t,parent:e}=this,r=Rt.parse(t.ctx.font).fontSize;return e.getStyle("font-size").getNumber(r)}getTElementBoundingBox(t){var e=this.getFontSize();return new kt(this.x,this.y-e,this.x+this.measureText(t),this.y)}getGlyph(t,e,r){var i=e[r],n=null;if(t.isArabic){var a=e.length,s=e[r-1],o=e[r+1],h="isolated";if((0===r||" "===s)&&r<a-2&&" "!==o&&(h="terminal"),r>0&&" "!==s&&r<a-2&&" "!==o&&(h="medial"),r>0&&" "!==s&&(r===a-1||" "===o)&&(h="initial"),void 0!==t.glyphs[i]){var u=t.glyphs[i];n=u instanceof Bt?u:u[h]}}else n=t.glyphs[i];return n||(n=t.missingGlyph),n}getText(){return""}getTextFromNode(t){var e=t||this.node,r=Array.from(e.parentNode.childNodes),i=r.indexOf(e),n=r.length-1,a=L(e.textContent||"");return 0===i&&(a=D(a)),i===n&&(a=B(a)),a}renderChildren(t){if("text"===this.type){this.initializeCoordinates(t),this.children.forEach(((e,r)=>{this.renderChild(t,this,this,r)}));var{mouse:e}=this.document.screen;e.isWorking()&&e.checkBoundingBox(this,this.getBoundingBox(t))}else this.renderTElementChildren(t)}renderTElementChildren(t){var{document:e,parent:r}=this,i=this.getText(),n=r.getStyle("font-family").getDefinition();if(n)for(var{unitsPerEm:a}=n.fontFace,s=Rt.parse(e.ctx.font),o=r.getStyle("font-size").getNumber(s.fontSize),h=r.getStyle("font-style").getString(s.fontStyle),u=o/a,l=n.isRTL?i.split("").reverse().join(""):i,c=j(r.getAttribute("dx").getString()),g=l.length,f=0;f<g;f++){var p=this.getGlyph(n,l,f);t.translate(this.x,this.y),t.scale(u,-u);var d=t.lineWidth;t.lineWidth=t.lineWidth*a/o,"italic"===h&&t.transform(1,0,.4,1,0,0),p.render(t),"italic"===h&&t.transform(1,0,-.4,1,0,0),t.lineWidth=d,t.scale(1/u,-1/u),t.translate(-this.x,-this.y),this.x+=o*(p.horizAdvX||n.horizAdvX)/a,void 0===c[f]||isNaN(c[f])||(this.x+=c[f])}else{var{x:v,y}=this;t.fillStyle&&t.fillText(i,v,y),t.strokeStyle&&t.strokeText(i,v,y)}}getAnchorDelta(t,e,r){var i=this.getStyle("text-anchor").getString("start");if("start"!==i){for(var{children:n}=e,a=n.length,s=null,o=0,h=r;h<a&&(s=n[h],!(h>r&&s.getAttribute("x").hasValue()||s.getAttribute("text-anchor").hasValue()));h++)o+=s.measureTextRecursive(t);return-1*("end"===i?o:o/2)}return 0}adjustChildCoordinates(t,e,r,i){var n=r.children[i];if("function"!=typeof n.measureText)return n;t.save(),n.setContext(t,!0);var a=n.getAttribute("x"),s=n.getAttribute("y"),o=n.getAttribute("dx"),h=n.getAttribute("dy"),u=n.getAttribute("text-anchor").getString("start");if(0===i&&"textNode"!==n.type&&(a.hasValue()||a.setValue(e.getAttribute("x").getValue("0")),s.hasValue()||s.setValue(e.getAttribute("y").getValue("0")),o.hasValue()||o.setValue(e.getAttribute("dx").getValue("0")),h.hasValue()||h.setValue(e.getAttribute("dy").getValue("0"))),a.hasValue()){if(n.x=a.getPixels("x")+e.getAnchorDelta(t,r,i),"start"!==u){var l=n.measureTextRecursive(t);n.x+=-1*("end"===u?l:l/2)}o.hasValue()&&(n.x+=o.getPixels("x"))}else{if("start"!==u){var c=n.measureTextRecursive(t);e.x+=-1*("end"===u?c:c/2)}o.hasValue()&&(e.x+=o.getPixels("x")),n.x=e.x}return e.x=n.x+n.measureText(t),s.hasValue()?(n.y=s.getPixels("y"),h.hasValue()&&(n.y+=h.getPixels("y"))):(h.hasValue()&&(e.y+=h.getPixels("y")),n.y=e.y),e.y=n.y,n.clearContext(t),t.restore(),n}getChildBoundingBox(t,e,r,i){var n=this.adjustChildCoordinates(t,e,r,i);if("function"!=typeof n.getBoundingBox)return null;var a=n.getBoundingBox(t);return a?(n.children.forEach(((r,i)=>{var s=e.getChildBoundingBox(t,e,n,i);a.addBoundingBox(s)})),a):null}renderChild(t,e,r,i){var n=this.adjustChildCoordinates(t,e,r,i);n.render(t),n.children.forEach(((r,i)=>{e.renderChild(t,e,n,i)}))}measureTextRecursive(t){return this.children.reduce(((e,r)=>e+r.measureTextRecursive(t)),this.measureText(t))}measureText(t){var{measureCache:e}=this;if(~e)return e;var r=this.getText(),i=this.measureTargetText(t,r);return this.measureCache=i,i}measureTargetText(t,e){if(!e.length)return 0;var{parent:r}=this,i=r.getStyle("font-family").getDefinition();if(i){for(var n=this.getFontSize(),a=i.isRTL?e.split("").reverse().join(""):e,s=j(r.getAttribute("dx").getString()),o=a.length,h=0,u=0;u<o;u++)h+=(this.getGlyph(i,a,u).horizAdvX||i.horizAdvX)*n/i.fontFace.unitsPerEm,void 0===s[u]||isNaN(s[u])||(h+=s[u]);return h}if(!t.measureText)return 10*e.length;t.save(),this.setContext(t,!0);var{width:l}=t.measureText(e);return this.clearContext(t),t.restore(),l}}class zt extends jt{constructor(t,e,r){super(t,e,new.target===zt||r),this.type="tspan",this.text=this.children.length>0?"":this.getTextFromNode()}getText(){return this.text}}class Ft extends zt{constructor(){super(...arguments),this.type="textNode"}}class Ut extends Lt{constructor(){super(...arguments),this.type="svg",this.root=!1}setContext(t){var e,{document:r}=this,{screen:i,window:n}=r,a=t.canvas;if(i.setDefaults(t),a.style&&void 0!==t.font&&n&&void 0!==n.getComputedStyle){t.font=n.getComputedStyle(a).getPropertyValue("font");var s=new lt(r,"fontSize",Rt.parse(t.font).fontSize);s.hasValue()&&(r.rootEmSize=s.getPixels("y"),r.emSize=r.rootEmSize)}this.getAttribute("x").hasValue()||this.getAttribute("x",!0).setValue(0),this.getAttribute("y").hasValue()||this.getAttribute("y",!0).setValue(0);var{width:o,height:h}=i.viewPort;this.getStyle("width").hasValue()||this.getStyle("width",!0).setValue("100%"),this.getStyle("height").hasValue()||this.getStyle("height",!0).setValue("100%"),this.getStyle("color").hasValue()||this.getStyle("color",!0).setValue("black");var u=this.getAttribute("refX"),l=this.getAttribute("refY"),c=this.getAttribute("viewBox"),g=c.hasValue()?j(c.getString()):null,f=!this.root&&"visible"!==this.getStyle("overflow").getValue("hidden"),p=0,d=0,v=0,y=0;g&&(p=g[0],d=g[1]),this.root||(o=this.getStyle("width").getPixels("x"),h=this.getStyle("height").getPixels("y"),"marker"===this.type&&(v=p,y=d,p=0,d=0)),i.viewPort.setCurrent(o,h),!this.node||this.parent&&"foreignObject"!==(null===(e=this.node.parentNode)||void 0===e?void 0:e.nodeName)||!this.getStyle("transform",!1,!0).hasValue()||this.getStyle("transform-origin",!1,!0).hasValue()||this.getStyle("transform-origin",!0,!0).setValue("50% 50%"),super.setContext(t),t.translate(this.getAttribute("x").getPixels("x"),this.getAttribute("y").getPixels("y")),g&&(o=g[2],h=g[3]),r.setViewBox({ctx:t,aspectRatio:this.getAttribute("preserveAspectRatio").getString(),width:i.viewPort.width,desiredWidth:o,height:i.viewPort.height,desiredHeight:h,minX:p,minY:d,refX:u.getValue(),refY:l.getValue(),clip:f,clipX:v,clipY:y}),g&&(i.viewPort.removeCurrent(),i.viewPort.setCurrent(o,h))}clearContext(t){super.clearContext(t),this.document.screen.viewPort.removeCurrent()}resize(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t,r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=this.getAttribute("width",!0),n=this.getAttribute("height",!0),a=this.getAttribute("viewBox"),s=this.getAttribute("style"),o=i.getNumber(0),h=n.getNumber(0);if(r)if("string"==typeof r)this.getAttribute("preserveAspectRatio",!0).setValue(r);else{var u=this.getAttribute("preserveAspectRatio");u.hasValue()&&u.setValue(u.getString().replace(/^\s*(\S.*\S)\s*$/,"$1"))}if(i.setValue(t),n.setValue(e),a.hasValue()||a.setValue("0 0 ".concat(o||t," ").concat(h||e)),s.hasValue()){var l=this.getStyle("width"),c=this.getStyle("height");l.hasValue()&&l.setValue("".concat(t,"px")),c.hasValue()&&c.setValue("".concat(e,"px"))}}}class Ht extends Dt{constructor(){super(...arguments),this.type="rect"}path(t){var e=this.getAttribute("x").getPixels("x"),r=this.getAttribute("y").getPixels("y"),i=this.getStyle("width",!1,!0).getPixels("x"),n=this.getStyle("height",!1,!0).getPixels("y"),a=this.getAttribute("rx"),s=this.getAttribute("ry"),o=a.getPixels("x"),h=s.getPixels("y");if(a.hasValue()&&!s.hasValue()&&(h=o),s.hasValue()&&!a.hasValue()&&(o=h),o=Math.min(o,i/2),h=Math.min(h,n/2),t){var u=(Math.sqrt(2)-1)/3*4;t.beginPath(),n>0&&i>0&&(t.moveTo(e+o,r),t.lineTo(e+i-o,r),t.bezierCurveTo(e+i-o+u*o,r,e+i,r+h-u*h,e+i,r+h),t.lineTo(e+i,r+n-h),t.bezierCurveTo(e+i,r+n-h+u*h,e+i-o+u*o,r+n,e+i-o,r+n),t.lineTo(e+o,r+n),t.bezierCurveTo(e+o-u*o,r+n,e,r+n-h+u*h,e,r+n-h),t.lineTo(e,r+h),t.bezierCurveTo(e,r+h-u*h,e+o-u*o,r,e+o,r),t.closePath())}return new kt(e,r,e+i,r+n)}getMarkers(){return null}}class Xt extends Dt{constructor(){super(...arguments),this.type="circle"}path(t){var e=this.getAttribute("cx").getPixels("x"),r=this.getAttribute("cy").getPixels("y"),i=this.getAttribute("r").getPixels();return t&&i>0&&(t.beginPath(),t.arc(e,r,i,0,2*Math.PI,!1),t.closePath()),new kt(e-i,r-i,e+i,r+i)}getMarkers(){return null}}class Yt extends Dt{constructor(){super(...arguments),this.type="ellipse"}path(t){var e=(Math.sqrt(2)-1)/3*4,r=this.getAttribute("rx").getPixels("x"),i=this.getAttribute("ry").getPixels("y"),n=this.getAttribute("cx").getPixels("x"),a=this.getAttribute("cy").getPixels("y");return t&&r>0&&i>0&&(t.beginPath(),t.moveTo(n+r,a),t.bezierCurveTo(n+r,a+e*i,n+e*r,a+i,n,a+i),t.bezierCurveTo(n-e*r,a+i,n-r,a+e*i,n-r,a),t.bezierCurveTo(n-r,a-e*i,n-e*r,a-i,n,a-i),t.bezierCurveTo(n+e*r,a-i,n+r,a-e*i,n+r,a),t.closePath()),new kt(n-r,a-i,n+r,a+i)}getMarkers(){return null}}class qt extends Dt{constructor(){super(...arguments),this.type="line"}getPoints(){return[new gt(this.getAttribute("x1").getPixels("x"),this.getAttribute("y1").getPixels("y")),new gt(this.getAttribute("x2").getPixels("x"),this.getAttribute("y2").getPixels("y"))]}path(t){var[{x:e,y:r},{x:i,y:n}]=this.getPoints();return t&&(t.beginPath(),t.moveTo(e,r),t.lineTo(i,n)),new kt(e,r,i,n)}getMarkers(){var[t,e]=this.getPoints(),r=t.angleTo(e);return[[t,r],[e,r]]}}class Wt extends Dt{constructor(t,e,r){super(t,e,r),this.type="polyline",this.points=[],this.points=gt.parsePath(this.getAttribute("points").getString())}path(t){var{points:e}=this,[{x:r,y:i}]=e,n=new kt(r,i);return t&&(t.beginPath(),t.moveTo(r,i)),e.forEach((e=>{var{x:r,y:i}=e;n.addPoint(r,i),t&&t.lineTo(r,i)})),n}getMarkers(){var{points:t}=this,e=t.length-1,r=[];return t.forEach(((i,n)=>{n!==e&&r.push([i,i.angleTo(t[n+1])])})),r.length>0&&r.push([t[t.length-1],r[r.length-1][1]]),r}}class Gt extends Wt{constructor(){super(...arguments),this.type="polygon"}path(t){var e=super.path(t),[{x:r,y:i}]=this.points;return t&&(t.lineTo(r,i),t.closePath()),e}}class Qt extends Ct{constructor(){super(...arguments),this.type="pattern"}createPattern(t,e,r){var i=this.getStyle("width").getPixels("x",!0),n=this.getStyle("height").getPixels("y",!0),a=new Ut(this.document,null);a.attributes.viewBox=new lt(this.document,"viewBox",this.getAttribute("viewBox").getValue()),a.attributes.width=new lt(this.document,"width","".concat(i,"px")),a.attributes.height=new lt(this.document,"height","".concat(n,"px")),a.attributes.transform=new lt(this.document,"transform",this.getAttribute("patternTransform").getValue()),a.children=this.children;var s=this.document.createCanvas(i,n),o=s.getContext("2d"),h=this.getAttribute("x"),u=this.getAttribute("y");h.hasValue()&&u.hasValue()&&o.translate(h.getPixels("x",!0),u.getPixels("y",!0)),r.hasValue()?this.styles["fill-opacity"]=r:Reflect.deleteProperty(this.styles,"fill-opacity");for(var l=-1;l<=1;l++)for(var c=-1;c<=1;c++)o.save(),a.attributes.x=new lt(this.document,"x",l*s.width),a.attributes.y=new lt(this.document,"y",c*s.height),a.render(o),o.restore();return t.createPattern(s,"repeat")}}class $t extends Ct{constructor(){super(...arguments),this.type="marker"}render(t,e,r){if(e){var{x:i,y:n}=e,a=this.getAttribute("orient").getString("auto"),s=this.getAttribute("markerUnits").getString("strokeWidth");t.translate(i,n),"auto"===a&&t.rotate(r),"strokeWidth"===s&&t.scale(t.lineWidth,t.lineWidth),t.save();var o=new Ut(this.document,null);o.type=this.type,o.attributes.viewBox=new lt(this.document,"viewBox",this.getAttribute("viewBox").getValue()),o.attributes.refX=new lt(this.document,"refX",this.getAttribute("refX").getValue()),o.attributes.refY=new lt(this.document,"refY",this.getAttribute("refY").getValue()),o.attributes.width=new lt(this.document,"width",this.getAttribute("markerWidth").getValue()),o.attributes.height=new lt(this.document,"height",this.getAttribute("markerHeight").getValue()),o.attributes.overflow=new lt(this.document,"overflow",this.getAttribute("overflow").getValue()),o.attributes.fill=new lt(this.document,"fill",this.getAttribute("fill").getColor("black")),o.attributes.stroke=new lt(this.document,"stroke",this.getAttribute("stroke").getValue("none")),o.children=this.children,o.render(t),t.restore(),"strokeWidth"===s&&t.scale(1/t.lineWidth,1/t.lineWidth),"auto"===a&&t.rotate(-r),t.translate(-i,-n)}}}class Zt extends Ct{constructor(){super(...arguments),this.type="defs"}render(){}}class Kt extends Lt{constructor(){super(...arguments),this.type="g"}getBoundingBox(t){var e=new kt;return this.children.forEach((r=>{e.addBoundingBox(r.getBoundingBox(t))})),e}}class Jt extends Ct{constructor(t,e,r){super(t,e,r),this.attributesToInherit=["gradientUnits"],this.stops=[];var{stops:i,children:n}=this;n.forEach((t=>{"stop"===t.type&&i.push(t)}))}getGradientUnits(){return this.getAttribute("gradientUnits").getString("objectBoundingBox")}createGradient(t,e,r){var i=this;this.getHrefAttribute().hasValue()&&(i=this.getHrefAttribute().getDefinition(),this.inheritStopContainer(i));var{stops:n}=i,a=this.getGradient(t,e);if(!a)return this.addParentOpacity(r,n[n.length-1].color);if(n.forEach((t=>{a.addColorStop(t.offset,this.addParentOpacity(r,t.color))})),this.getAttribute("gradientTransform").hasValue()){var{document:s}=this,{MAX_VIRTUAL_PIXELS:o,viewPort:h}=s.screen,[u]=h.viewPorts,l=new Ht(s,null);l.attributes.x=new lt(s,"x",-o/3),l.attributes.y=new lt(s,"y",-o/3),l.attributes.width=new lt(s,"width",o),l.attributes.height=new lt(s,"height",o);var c=new Kt(s,null);c.attributes.transform=new lt(s,"transform",this.getAttribute("gradientTransform").getValue()),c.children=[l];var g=new Ut(s,null);g.attributes.x=new lt(s,"x",0),g.attributes.y=new lt(s,"y",0),g.attributes.width=new lt(s,"width",u.width),g.attributes.height=new lt(s,"height",u.height),g.children=[c];var f=s.createCanvas(u.width,u.height),p=f.getContext("2d");return p.fillStyle=a,g.render(p),p.createPattern(f,"no-repeat")}return a}inheritStopContainer(t){this.attributesToInherit.forEach((e=>{!this.getAttribute(e).hasValue()&&t.getAttribute(e).hasValue()&&this.getAttribute(e,!0).setValue(t.getAttribute(e).getValue())}))}addParentOpacity(t,e){return t.hasValue()?new lt(this.document,"color",e).addOpacity(t).getColor():e}}class te extends Jt{constructor(t,e,r){super(t,e,r),this.type="linearGradient",this.attributesToInherit.push("x1","y1","x2","y2")}getGradient(t,e){var r="objectBoundingBox"===this.getGradientUnits(),i=r?e.getBoundingBox(t):null;if(r&&!i)return null;this.getAttribute("x1").hasValue()||this.getAttribute("y1").hasValue()||this.getAttribute("x2").hasValue()||this.getAttribute("y2").hasValue()||(this.getAttribute("x1",!0).setValue(0),this.getAttribute("y1",!0).setValue(0),this.getAttribute("x2",!0).setValue(1),this.getAttribute("y2",!0).setValue(0));var n=r?i.x+i.width*this.getAttribute("x1").getNumber():this.getAttribute("x1").getPixels("x"),a=r?i.y+i.height*this.getAttribute("y1").getNumber():this.getAttribute("y1").getPixels("y"),s=r?i.x+i.width*this.getAttribute("x2").getNumber():this.getAttribute("x2").getPixels("x"),o=r?i.y+i.height*this.getAttribute("y2").getNumber():this.getAttribute("y2").getPixels("y");return n===s&&a===o?null:t.createLinearGradient(n,a,s,o)}}class ee extends Jt{constructor(t,e,r){super(t,e,r),this.type="radialGradient",this.attributesToInherit.push("cx","cy","r","fx","fy","fr")}getGradient(t,e){var r="objectBoundingBox"===this.getGradientUnits(),i=e.getBoundingBox(t);if(r&&!i)return null;this.getAttribute("cx").hasValue()||this.getAttribute("cx",!0).setValue("50%"),this.getAttribute("cy").hasValue()||this.getAttribute("cy",!0).setValue("50%"),this.getAttribute("r").hasValue()||this.getAttribute("r",!0).setValue("50%");var n=r?i.x+i.width*this.getAttribute("cx").getNumber():this.getAttribute("cx").getPixels("x"),a=r?i.y+i.height*this.getAttribute("cy").getNumber():this.getAttribute("cy").getPixels("y"),s=n,o=a;this.getAttribute("fx").hasValue()&&(s=r?i.x+i.width*this.getAttribute("fx").getNumber():this.getAttribute("fx").getPixels("x")),this.getAttribute("fy").hasValue()&&(o=r?i.y+i.height*this.getAttribute("fy").getNumber():this.getAttribute("fy").getPixels("y"));var h=r?(i.width+i.height)/2*this.getAttribute("r").getNumber():this.getAttribute("r").getPixels(),u=this.getAttribute("fr").getPixels();return t.createRadialGradient(s,o,u,n,a,h)}}class re extends Ct{constructor(t,e,r){super(t,e,r),this.type="stop";var i=Math.max(0,Math.min(1,this.getAttribute("offset").getNumber())),n=this.getStyle("stop-opacity"),a=this.getStyle("stop-color",!0);""===a.getString()&&a.setValue("#000"),n.hasValue()&&(a=a.addOpacity(n)),this.offset=i,this.color=a.getColor()}}class ie extends Ct{constructor(t,e,r){super(t,e,r),this.type="animate",this.duration=0,this.initialValue=null,this.initialUnits="",this.removed=!1,this.frozen=!1,t.screen.animations.push(this),this.begin=this.getAttribute("begin").getMilliseconds(),this.maxDuration=this.begin+this.getAttribute("dur").getMilliseconds(),this.from=this.getAttribute("from"),this.to=this.getAttribute("to"),this.values=new lt(t,"values",null);var i=this.getAttribute("values");i.hasValue()&&this.values.setValue(i.getString().split(";"))}getProperty(){var t=this.getAttribute("attributeType").getString(),e=this.getAttribute("attributeName").getString();return"CSS"===t?this.parent.getStyle(e,!0):this.parent.getAttribute(e,!0)}calcValue(){var{initialUnits:t}=this,{progress:e,from:r,to:i}=this.getProgress(),n=r.getNumber()+(i.getNumber()-r.getNumber())*e;return"%"===t&&(n*=100),"".concat(n).concat(t)}update(t){var{parent:e}=this,r=this.getProperty();if(this.initialValue||(this.initialValue=r.getString(),this.initialUnits=r.getUnits()),this.duration>this.maxDuration){var i=this.getAttribute("fill").getString("remove");if("indefinite"===this.getAttribute("repeatCount").getString()||"indefinite"===this.getAttribute("repeatDur").getString())this.duration=0;else if("freeze"!==i||this.frozen){if("remove"===i&&!this.removed)return this.removed=!0,r.setValue(e.animationFrozen?e.animationFrozenValue:this.initialValue),!0}else this.frozen=!0,e.animationFrozen=!0,e.animationFrozenValue=r.getString();return!1}this.duration+=t;var n=!1;if(this.begin<this.duration){var a=this.calcValue(),s=this.getAttribute("type");if(s.hasValue()){var o=s.getString();a="".concat(o,"(").concat(a,")")}r.setValue(a),n=!0}return n}getProgress(){var{document:t,values:e}=this,r={progress:(this.duration-this.begin)/(this.maxDuration-this.begin)};if(e.hasValue()){var i=r.progress*(e.getValue().length-1),n=Math.floor(i),a=Math.ceil(i);r.from=new lt(t,"from",parseFloat(e.getValue()[n])),r.to=new lt(t,"to",parseFloat(e.getValue()[a])),r.progress=(i-n)/(a-n)}else r.from=this.from,r.to=this.to;return r}}class ne extends ie{constructor(){super(...arguments),this.type="animateColor"}calcValue(){var{progress:t,from:e,to:r}=this.getProgress(),i=new h(e.getColor()),n=new h(r.getColor());if(i.ok&&n.ok){var a=i.r+(n.r-i.r)*t,s=i.g+(n.g-i.g)*t,o=i.b+(n.b-i.b)*t;return"rgb(".concat(Math.floor(a),", ").concat(Math.floor(s),", ").concat(Math.floor(o),")")}return this.getAttribute("from").getColor()}}class ae extends ie{constructor(){super(...arguments),this.type="animateTransform"}calcValue(){var{progress:t,from:e,to:r}=this.getProgress(),i=j(e.getString()),n=j(r.getString()),a=i.map(((e,r)=>e+(n[r]-e)*t)).join(" ");return a}}class se extends Ct{constructor(t,e,r){super(t,e,r),this.type="font",this.glyphs={},this.horizAdvX=this.getAttribute("horiz-adv-x").getNumber();var{definitions:i}=t,{children:n}=this;for(var a of n)switch(a.type){case"font-face":this.fontFace=a;var s=a.getStyle("font-family");s.hasValue()&&(i[s.getString()]=this);break;case"missing-glyph":this.missingGlyph=a;break;case"glyph":var o=a;o.arabicForm?(this.isRTL=!0,this.isArabic=!0,void 0===this.glyphs[o.unicode]&&(this.glyphs[o.unicode]={}),this.glyphs[o.unicode][o.arabicForm]=o):this.glyphs[o.unicode]=o}}render(){}}class oe extends Ct{constructor(t,e,r){super(t,e,r),this.type="font-face",this.ascent=this.getAttribute("ascent").getNumber(),this.descent=this.getAttribute("descent").getNumber(),this.unitsPerEm=this.getAttribute("units-per-em").getNumber()}}class he extends Dt{constructor(){super(...arguments),this.type="missing-glyph",this.horizAdvX=0}}class ue extends jt{constructor(){super(...arguments),this.type="tref"}getText(){var t=this.getHrefAttribute().getDefinition();if(t){var e=t.children[0];if(e)return e.getText()}return""}}class le extends jt{constructor(t,e,r){super(t,e,r),this.type="a";var{childNodes:i}=e,n=i[0],a=i.length>0&&Array.from(i).every((t=>3===t.nodeType));this.hasText=a,this.text=a?this.getTextFromNode(n):""}getText(){return this.text}renderChildren(t){if(this.hasText){super.renderChildren(t);var{document:e,x:r,y:i}=this,{mouse:n}=e.screen,a=new lt(e,"fontSize",Rt.parse(e.ctx.font).fontSize);n.isWorking()&&n.checkBoundingBox(this,new kt(r,i-a.getPixels("y"),r+this.measureText(t),i))}else if(this.children.length>0){var s=new Kt(this.document,null);s.children=this.children,s.parent=this,s.render(t)}}onClick(){var{window:t}=this.document;t&&t.open(this.getHrefAttribute().getString())}onMouseMove(){this.document.ctx.canvas.style.cursor="pointer"}}function ce(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,i)}return r}function ge(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?ce(Object(r),!0).forEach((function(e){s(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):ce(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}class fe extends jt{constructor(t,e,r){super(t,e,r),this.type="textPath",this.textWidth=0,this.textHeight=0,this.pathLength=-1,this.glyphInfo=null,this.letterSpacingCache=[],this.measuresCache=new Map([["",0]]);var i=this.getHrefAttribute().getDefinition();this.text=this.getTextFromNode(),this.dataArray=this.parsePathData(i)}getText(){return this.text}path(t){var{dataArray:e}=this;t&&t.beginPath(),e.forEach((e=>{var{type:r,points:i}=e;switch(r){case It.LINE_TO:t&&t.lineTo(i[0],i[1]);break;case It.MOVE_TO:t&&t.moveTo(i[0],i[1]);break;case It.CURVE_TO:t&&t.bezierCurveTo(i[0],i[1],i[2],i[3],i[4],i[5]);break;case It.QUAD_TO:t&&t.quadraticCurveTo(i[0],i[1],i[2],i[3]);break;case It.ARC:var[n,a,s,o,h,u,l,c]=i,g=s>o?s:o,f=s>o?1:s/o,p=s>o?o/s:1;t&&(t.translate(n,a),t.rotate(l),t.scale(f,p),t.arc(0,0,g,h,h+u,Boolean(1-c)),t.scale(1/f,1/p),t.rotate(-l),t.translate(-n,-a));break;case It.CLOSE_PATH:t&&t.closePath()}}))}renderChildren(t){this.setTextData(t),t.save();var e=this.parent.getStyle("text-decoration").getString(),r=this.getFontSize(),{glyphInfo:i}=this,n=t.fillStyle;"underline"===e&&t.beginPath(),i.forEach(((i,n)=>{var{p0:a,p1:s,rotation:o,text:h}=i;t.save(),t.translate(a.x,a.y),t.rotate(o),t.fillStyle&&t.fillText(h,0,0),t.strokeStyle&&t.strokeText(h,0,0),t.restore(),"underline"===e&&(0===n&&t.moveTo(a.x,a.y+r/8),t.lineTo(s.x,s.y+r/5))})),"underline"===e&&(t.lineWidth=r/20,t.strokeStyle=n,t.stroke(),t.closePath()),t.restore()}getLetterSpacingAt(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return this.letterSpacingCache[t]||0}findSegmentToFitChar(t,e,r,i,n,a,s,o,h){var u=a,l=this.measureText(t,o);" "===o&&"justify"===e&&r<i&&(l+=(i-r)/n),h>-1&&(u+=this.getLetterSpacingAt(h));var c=this.textHeight/20,g=this.getEquidistantPointOnPath(u,c,0),f=this.getEquidistantPointOnPath(u+l,c,0),p={p0:g,p1:f},d=g&&f?Math.atan2(f.y-g.y,f.x-g.x):0;if(s){var v=Math.cos(Math.PI/2+d)*s,y=Math.cos(-d)*s;p.p0=ge(ge({},g),{},{x:g.x+v,y:g.y+y}),p.p1=ge(ge({},f),{},{x:f.x+v,y:f.y+y})}return{offset:u+=l,segment:p,rotation:d}}measureText(t,e){var{measuresCache:r}=this,i=e||this.getText();if(r.has(i))return r.get(i);var n=this.measureTargetText(t,i);return r.set(i,n),n}setTextData(t){if(!this.glyphInfo){var e=this.getText(),r=e.split(""),i=e.split(" ").length-1,n=this.parent.getAttribute("dx").split().map((t=>t.getPixels("x"))),a=this.parent.getAttribute("dy").getPixels("y"),s=this.parent.getStyle("text-anchor").getString("start"),o=this.getStyle("letter-spacing"),h=this.parent.getStyle("letter-spacing"),u=0;o.hasValue()&&"inherit"!==o.getValue()?o.hasValue()&&"initial"!==o.getValue()&&"unset"!==o.getValue()&&(u=o.getPixels()):u=h.getPixels();var l=[],c=e.length;this.letterSpacingCache=l;for(var g=0;g<c;g++)l.push(void 0!==n[g]?n[g]:u);var f=l.reduce(((t,e,r)=>0===r?0:t+e||0),0),p=this.measureText(t),d=Math.max(p+f,0);this.textWidth=p,this.textHeight=this.getFontSize(),this.glyphInfo=[];var v=this.getPathLength(),y=this.getStyle("startOffset").getNumber(0)*v,m=0;"middle"!==s&&"center"!==s||(m=-d/2),"end"!==s&&"right"!==s||(m=-d),m+=y,r.forEach(((e,n)=>{var{offset:o,segment:h,rotation:u}=this.findSegmentToFitChar(t,s,d,v,i,m,a,e,n);m=o,h.p0&&h.p1&&this.glyphInfo.push({text:r[n],p0:h.p0,p1:h.p1,rotation:u})}))}}parsePathData(t){if(this.pathLength=-1,!t)return[];var e=[],{pathParser:r}=t;for(r.reset();!r.isEnd();){var{current:i}=r,n=i?i.x:0,a=i?i.y:0,s=r.next(),o=s.type,h=[];switch(s.type){case It.MOVE_TO:this.pathM(r,h);break;case It.LINE_TO:o=this.pathL(r,h);break;case It.HORIZ_LINE_TO:o=this.pathH(r,h);break;case It.VERT_LINE_TO:o=this.pathV(r,h);break;case It.CURVE_TO:this.pathC(r,h);break;case It.SMOOTH_CURVE_TO:o=this.pathS(r,h);break;case It.QUAD_TO:this.pathQ(r,h);break;case It.SMOOTH_QUAD_TO:o=this.pathT(r,h);break;case It.ARC:h=this.pathA(r);break;case It.CLOSE_PATH:Dt.pathZ(r)}s.type!==It.CLOSE_PATH?e.push({type:o,points:h,start:{x:n,y:a},pathLength:this.calcLength(n,a,o,h)}):e.push({type:It.CLOSE_PATH,points:[],pathLength:0})}return e}pathM(t,e){var{x:r,y:i}=Dt.pathM(t).point;e.push(r,i)}pathL(t,e){var{x:r,y:i}=Dt.pathL(t).point;return e.push(r,i),It.LINE_TO}pathH(t,e){var{x:r,y:i}=Dt.pathH(t).point;return e.push(r,i),It.LINE_TO}pathV(t,e){var{x:r,y:i}=Dt.pathV(t).point;return e.push(r,i),It.LINE_TO}pathC(t,e){var{point:r,controlPoint:i,currentPoint:n}=Dt.pathC(t);e.push(r.x,r.y,i.x,i.y,n.x,n.y)}pathS(t,e){var{point:r,controlPoint:i,currentPoint:n}=Dt.pathS(t);return e.push(r.x,r.y,i.x,i.y,n.x,n.y),It.CURVE_TO}pathQ(t,e){var{controlPoint:r,currentPoint:i}=Dt.pathQ(t);e.push(r.x,r.y,i.x,i.y)}pathT(t,e){var{controlPoint:r,currentPoint:i}=Dt.pathT(t);return e.push(r.x,r.y,i.x,i.y),It.QUAD_TO}pathA(t){var{rX:e,rY:r,sweepFlag:i,xAxisRotation:n,centp:a,a1:s,ad:o}=Dt.pathA(t);return 0===i&&o>0&&(o-=2*Math.PI),1===i&&o<0&&(o+=2*Math.PI),[a.x,a.y,e,r,s,o,n,i]}calcLength(t,e,r,i){var n=0,a=null,s=null,o=0;switch(r){case It.LINE_TO:return this.getLineLength(t,e,i[0],i[1]);case It.CURVE_TO:for(n=0,a=this.getPointOnCubicBezier(0,t,e,i[0],i[1],i[2],i[3],i[4],i[5]),o=.01;o<=1;o+=.01)s=this.getPointOnCubicBezier(o,t,e,i[0],i[1],i[2],i[3],i[4],i[5]),n+=this.getLineLength(a.x,a.y,s.x,s.y),a=s;return n;case It.QUAD_TO:for(n=0,a=this.getPointOnQuadraticBezier(0,t,e,i[0],i[1],i[2],i[3]),o=.01;o<=1;o+=.01)s=this.getPointOnQuadraticBezier(o,t,e,i[0],i[1],i[2],i[3]),n+=this.getLineLength(a.x,a.y,s.x,s.y),a=s;return n;case It.ARC:n=0;var h=i[4],u=i[5],l=i[4]+u,c=Math.PI/180;if(Math.abs(h-l)<c&&(c=Math.abs(h-l)),a=this.getPointOnEllipticalArc(i[0],i[1],i[2],i[3],h,0),u<0)for(o=h-c;o>l;o-=c)s=this.getPointOnEllipticalArc(i[0],i[1],i[2],i[3],o,0),n+=this.getLineLength(a.x,a.y,s.x,s.y),a=s;else for(o=h+c;o<l;o+=c)s=this.getPointOnEllipticalArc(i[0],i[1],i[2],i[3],o,0),n+=this.getLineLength(a.x,a.y,s.x,s.y),a=s;return s=this.getPointOnEllipticalArc(i[0],i[1],i[2],i[3],l,0),n+this.getLineLength(a.x,a.y,s.x,s.y)}return 0}getPointOnLine(t,e,r,i,n){var a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:e,s=arguments.length>6&&void 0!==arguments[6]?arguments[6]:r,o=(n-r)/(i-e+J),h=Math.sqrt(t*t/(1+o*o));i<e&&(h*=-1);var u=o*h,l=null;if(i===e)l={x:a,y:s+u};else if((s-r)/(a-e+J)===o)l={x:a+h,y:s+u};else{var c,g,f=this.getLineLength(e,r,i,n);if(f<J)return null;var p=(a-e)*(i-e)+(s-r)*(n-r);c=e+(p/=f*f)*(i-e),g=r+p*(n-r);var d=this.getLineLength(a,s,c,g),v=Math.sqrt(t*t-d*d);h=Math.sqrt(v*v/(1+o*o)),i<e&&(h*=-1),l={x:c+h,y:g+(u=o*h)}}return l}getPointOnPath(t){var e=this.getPathLength(),r=0,i=null;if(t<-5e-5||t-5e-5>e)return null;var{dataArray:n}=this;for(var a of n){if(!a||!(a.pathLength<5e-5||r+a.pathLength+5e-5<t)){var s=t-r,o=0;switch(a.type){case It.LINE_TO:i=this.getPointOnLine(s,a.start.x,a.start.y,a.points[0],a.points[1],a.start.x,a.start.y);break;case It.ARC:var h=a.points[4],u=a.points[5],l=a.points[4]+u;if(o=h+s/a.pathLength*u,u<0&&o<l||u>=0&&o>l)break;i=this.getPointOnEllipticalArc(a.points[0],a.points[1],a.points[2],a.points[3],o,a.points[6]);break;case It.CURVE_TO:(o=s/a.pathLength)>1&&(o=1),i=this.getPointOnCubicBezier(o,a.start.x,a.start.y,a.points[0],a.points[1],a.points[2],a.points[3],a.points[4],a.points[5]);break;case It.QUAD_TO:(o=s/a.pathLength)>1&&(o=1),i=this.getPointOnQuadraticBezier(o,a.start.x,a.start.y,a.points[0],a.points[1],a.points[2],a.points[3])}if(i)return i;break}r+=a.pathLength}return null}getLineLength(t,e,r,i){return Math.sqrt((r-t)*(r-t)+(i-e)*(i-e))}getPathLength(){return-1===this.pathLength&&(this.pathLength=this.dataArray.reduce(((t,e)=>e.pathLength>0?t+e.pathLength:t),0)),this.pathLength}getPointOnCubicBezier(t,e,r,i,n,a,s,o,h){return{x:o*it(t)+a*nt(t)+i*at(t)+e*st(t),y:h*it(t)+s*nt(t)+n*at(t)+r*st(t)}}getPointOnQuadraticBezier(t,e,r,i,n,a,s){return{x:a*ot(t)+i*ht(t)+e*ut(t),y:s*ot(t)+n*ht(t)+r*ut(t)}}getPointOnEllipticalArc(t,e,r,i,n,a){var s=Math.cos(a),o=Math.sin(a),h=r*Math.cos(n),u=i*Math.sin(n);return{x:t+(h*s-u*o),y:e+(h*o+u*s)}}buildEquidistantCache(t,e){var r=this.getPathLength(),i=e||.25,n=t||r/100;if(!this.equidistantCache||this.equidistantCache.step!==n||this.equidistantCache.precision!==i){this.equidistantCache={step:n,precision:i,points:[]};for(var a=0,s=0;s<=r;s+=i){var o=this.getPointOnPath(s),h=this.getPointOnPath(s+i);o&&h&&(a+=this.getLineLength(o.x,o.y,h.x,h.y))>=n&&(this.equidistantCache.points.push({x:o.x,y:o.y,distance:s}),a-=n)}}}getEquidistantPointOnPath(t,e,r){if(this.buildEquidistantCache(e,r),t<0||t-this.getPathLength()>5e-5)return null;var i=Math.round(t/this.getPathLength()*(this.equidistantCache.points.length-1));return this.equidistantCache.points[i]||null}}var pe=/^\s*data:(([^/,;]+\/[^/,;]+)(?:;([^,;=]+=[^,;=]+))?)?(?:;(base64))?,(.*)$/i;class de extends Lt{constructor(t,e,r){super(t,e,r),this.type="image",this.loaded=!1;var i=this.getHrefAttribute().getString();if(i){var n=i.endsWith(".svg")||/^\s*data:image\/svg\+xml/i.test(i);t.images.push(this),n?this.loadSvg(i):this.loadImage(i),this.isSvg=n}}loadImage(t){var e=this;return a((function*(){try{var r=yield e.document.createImage(t);e.image=r}catch(e){console.error('Error while loading image "'.concat(t,'":'),e)}e.loaded=!0}))()}loadSvg(t){var e=this;return a((function*(){var r=pe.exec(t);if(r){var i=r[5];"base64"===r[4]?e.image=atob(i):e.image=decodeURIComponent(i)}else try{var n=yield e.document.fetch(t),a=yield n.text();e.image=a}catch(e){console.error('Error while loading image "'.concat(t,'":'),e)}e.loaded=!0}))()}renderChildren(t){var{document:e,image:r,loaded:i}=this,n=this.getAttribute("x").getPixels("x"),a=this.getAttribute("y").getPixels("y"),s=this.getStyle("width").getPixels("x"),o=this.getStyle("height").getPixels("y");if(i&&r&&s&&o){if(t.save(),t.translate(n,a),this.isSvg){var h=e.canvg.forkString(t,this.image,{ignoreMouse:!0,ignoreAnimation:!0,ignoreDimensions:!0,ignoreClear:!0,offsetX:0,offsetY:0,scaleWidth:s,scaleHeight:o});h.document.documentElement.parent=this,h.render()}else{var u=this.image;e.setViewBox({ctx:t,aspectRatio:this.getAttribute("preserveAspectRatio").getString(),width:s,desiredWidth:u.width,height:o,desiredHeight:u.height}),this.loaded&&(void 0===u.complete||u.complete)&&t.drawImage(u,0,0)}t.restore()}}getBoundingBox(){var t=this.getAttribute("x").getPixels("x"),e=this.getAttribute("y").getPixels("y"),r=this.getStyle("width").getPixels("x"),i=this.getStyle("height").getPixels("y");return new kt(t,e,t+r,e+i)}}class ve extends Lt{constructor(){super(...arguments),this.type="symbol"}render(t){}}class ye{constructor(t){this.document=t,this.loaded=!1,t.fonts.push(this)}load(t,e){var r=this;return a((function*(){try{var{document:i}=r,n=(yield i.canvg.parser.load(e)).getElementsByTagName("font");Array.from(n).forEach((e=>{var r=i.createElement(e);i.definitions[t]=r}))}catch(t){console.error('Error while loading font "'.concat(e,'":'),t)}r.loaded=!0}))()}}class me extends Ct{constructor(t,e,r){super(t,e,r),this.type="style";var i=L(Array.from(e.childNodes).map((t=>t.textContent)).join("").replace(/(\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+\/)|(^[\s]*\/\/.*)/gm,"").replace(/@import.*;/g,""));i.split("}").forEach((e=>{var r=e.trim();if(r){var i=r.split("{"),n=i[0].split(","),a=i[1].split(";");n.forEach((e=>{var r=e.trim();if(r){var i=t.styles[r]||{};if(a.forEach((e=>{var r=e.indexOf(":"),n=e.substr(0,r).trim(),a=e.substr(r+1,e.length-r).trim();n&&a&&(i[n]=new lt(t,n,a))})),t.styles[r]=i,t.stylesSpecificity[r]=K(r),"@font-face"===r){var n=i["font-family"].getString().replace(/"|'/g,"");i.src.getString().split(",").forEach((e=>{if(e.indexOf('format("svg")')>0){var r=U(e);r&&new ye(t).load(n,r)}}))}}}))}}))}}me.parseExternalUrl=U;class xe extends Lt{constructor(){super(...arguments),this.type="use"}setContext(t){super.setContext(t);var e=this.getAttribute("x"),r=this.getAttribute("y");e.hasValue()&&t.translate(e.getPixels("x"),0),r.hasValue()&&t.translate(0,r.getPixels("y"))}path(t){var{element:e}=this;e&&e.path(t)}renderChildren(t){var{document:e,element:r}=this;if(r){var i=r;if("symbol"===r.type&&((i=new Ut(e,null)).attributes.viewBox=new lt(e,"viewBox",r.getAttribute("viewBox").getString()),i.attributes.preserveAspectRatio=new lt(e,"preserveAspectRatio",r.getAttribute("preserveAspectRatio").getString()),i.attributes.overflow=new lt(e,"overflow",r.getAttribute("overflow").getString()),i.children=r.children,r.styles.opacity=new lt(e,"opacity",this.calculateOpacity())),"svg"===i.type){var n=this.getStyle("width",!1,!0),a=this.getStyle("height",!1,!0);n.hasValue()&&(i.attributes.width=new lt(e,"width",n.getString())),a.hasValue()&&(i.attributes.height=new lt(e,"height",a.getString()))}var s=i.parent;i.parent=this,i.render(t),i.parent=s}}getBoundingBox(t){var{element:e}=this;return e?e.getBoundingBox(t):null}elementTransform(){var{document:t,element:e}=this;return Et.fromElement(t,e)}get element(){return this.cachedElement||(this.cachedElement=this.getHrefAttribute().getDefinition()),this.cachedElement}}function be(t,e,r,i,n,a){return t[r*i*4+4*e+a]}function Se(t,e,r,i,n,a,s){t[r*i*4+4*e+a]=s}function we(t,e,r){return t[e]*r}function Te(t,e,r,i){return e+Math.cos(t)*r+Math.sin(t)*i}class Ae extends Ct{constructor(t,e,r){super(t,e,r),this.type="feColorMatrix";var i=j(this.getAttribute("values").getString());switch(this.getAttribute("type").getString("matrix")){case"saturate":var n=i[0];i=[.213+.787*n,.715-.715*n,.072-.072*n,0,0,.213-.213*n,.715+.285*n,.072-.072*n,0,0,.213-.213*n,.715-.715*n,.072+.928*n,0,0,0,0,0,1,0,0,0,0,0,1];break;case"hueRotate":var a=i[0]*Math.PI/180;i=[Te(a,.213,.787,-.213),Te(a,.715,-.715,-.715),Te(a,.072,-.072,.928),0,0,Te(a,.213,-.213,.143),Te(a,.715,.285,.14),Te(a,.072,-.072,-.283),0,0,Te(a,.213,-.213,-.787),Te(a,.715,-.715,.715),Te(a,.072,.928,.072),0,0,0,0,0,1,0,0,0,0,0,1];break;case"luminanceToAlpha":i=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,.2125,.7154,.0721,0,0,0,0,0,0,1]}this.matrix=i,this.includeOpacity=this.getAttribute("includeOpacity").hasValue()}apply(t,e,r,i,n){for(var{includeOpacity:a,matrix:s}=this,o=t.getImageData(0,0,i,n),h=0;h<n;h++)for(var u=0;u<i;u++){var l=be(o.data,u,h,i,0,0),c=be(o.data,u,h,i,0,1),g=be(o.data,u,h,i,0,2),f=be(o.data,u,h,i,0,3),p=we(s,0,l)+we(s,1,c)+we(s,2,g)+we(s,3,f)+we(s,4,1),d=we(s,5,l)+we(s,6,c)+we(s,7,g)+we(s,8,f)+we(s,9,1),v=we(s,10,l)+we(s,11,c)+we(s,12,g)+we(s,13,f)+we(s,14,1),y=we(s,15,l)+we(s,16,c)+we(s,17,g)+we(s,18,f)+we(s,19,1);a&&(p=0,d=0,v=0,y*=f/255),Se(o.data,u,h,i,0,0,p),Se(o.data,u,h,i,0,1,d),Se(o.data,u,h,i,0,2,v),Se(o.data,u,h,i,0,3,y)}t.clearRect(0,0,i,n),t.putImageData(o,0,0)}}class Oe extends Ct{constructor(){super(...arguments),this.type="mask"}apply(t,e){var{document:r}=this,i=this.getAttribute("x").getPixels("x"),n=this.getAttribute("y").getPixels("y"),a=this.getStyle("width").getPixels("x"),s=this.getStyle("height").getPixels("y");if(!a&&!s){var o=new kt;this.children.forEach((e=>{o.addBoundingBox(e.getBoundingBox(t))})),i=Math.floor(o.x1),n=Math.floor(o.y1),a=Math.floor(o.width),s=Math.floor(o.height)}var h=this.removeStyles(e,Oe.ignoreStyles),u=r.createCanvas(i+a,n+s),l=u.getContext("2d");r.screen.setDefaults(l),this.renderChildren(l),new Ae(r,{nodeType:1,childNodes:[],attributes:[{nodeName:"type",value:"luminanceToAlpha"},{nodeName:"includeOpacity",value:"true"}]}).apply(l,0,0,i+a,n+s);var c=r.createCanvas(i+a,n+s),g=c.getContext("2d");r.screen.setDefaults(g),e.render(g),g.globalCompositeOperation="destination-in",g.fillStyle=l.createPattern(u,"no-repeat"),g.fillRect(0,0,i+a,n+s),t.fillStyle=g.createPattern(c,"no-repeat"),t.fillRect(0,0,i+a,n+s),this.restoreStyles(e,h)}render(t){}}Oe.ignoreStyles=["mask","transform","clip-path"];var Pe=()=>{};class Ee extends Ct{constructor(){super(...arguments),this.type="clipPath"}apply(t){var{document:e}=this,r=Reflect.getPrototypeOf(t),{beginPath:i,closePath:n}=t;r&&(r.beginPath=Pe,r.closePath=Pe),Reflect.apply(i,t,[]),this.children.forEach((i=>{if(void 0!==i.path){var a=void 0!==i.elementTransform?i.elementTransform():null;a||(a=Et.fromElement(e,i)),a&&a.apply(t),i.path(t),r&&(r.closePath=n),a&&a.unapply(t)}})),Reflect.apply(n,t,[]),t.clip(),r&&(r.beginPath=i,r.closePath=n)}render(t){}}class Ce extends Ct{constructor(){super(...arguments),this.type="filter"}apply(t,e){var{document:r,children:i}=this,n=e.getBoundingBox(t);if(n){var a=0,s=0;i.forEach((t=>{var e=t.extraFilterDistance||0;a=Math.max(a,e),s=Math.max(s,e)}));var o=Math.floor(n.width),h=Math.floor(n.height),u=o+2*a,l=h+2*s;if(!(u<1||l<1)){var c=Math.floor(n.x),g=Math.floor(n.y),f=this.removeStyles(e,Ce.ignoreStyles),p=r.createCanvas(u,l),d=p.getContext("2d");r.screen.setDefaults(d),d.translate(-c+a,-g+s),e.render(d),i.forEach((t=>{"function"==typeof t.apply&&t.apply(d,0,0,u,l)})),t.drawImage(p,0,0,u,l,c-a,g-s,u,l),this.restoreStyles(e,f)}}}render(t){}}Ce.ignoreStyles=["filter","transform","clip-path"];class Me extends Ct{constructor(t,e,r){super(t,e,r),this.type="feDropShadow",this.addStylesFromStyleDefinition()}apply(t,e,r,i,n){}}class Ne extends Ct{constructor(){super(...arguments),this.type="feMorphology"}apply(t,e,r,i,n){}}class _e extends Ct{constructor(){super(...arguments),this.type="feComposite"}apply(t,e,r,i,n){}}class Ve extends Ct{constructor(t,e,r){super(t,e,r),this.type="feGaussianBlur",this.blurRadius=Math.floor(this.getAttribute("stdDeviation").getNumber()),this.extraFilterDistance=this.blurRadius}apply(t,e,r,i,n){var{document:a,blurRadius:s}=this,o=a.window?a.window.document.body:null,h=t.canvas;h.id=a.getUniqueId(),o&&(h.style.display="none",o.appendChild(h)),V(h,e,r,i,n,s),o&&o.removeChild(h)}}class Re extends Ct{constructor(){super(...arguments),this.type="title"}}class ke extends Ct{constructor(){super(...arguments),this.type="desc"}}var Ie={svg:Ut,rect:Ht,circle:Xt,ellipse:Yt,line:qt,polyline:Wt,polygon:Gt,path:Dt,pattern:Qt,marker:$t,defs:Zt,linearGradient:te,radialGradient:ee,stop:re,animate:ie,animateColor:ne,animateTransform:ae,font:se,"font-face":oe,"missing-glyph":he,glyph:Bt,text:jt,tspan:zt,tref:ue,a:le,textPath:fe,image:de,g:Kt,symbol:ve,style:me,use:xe,mask:Oe,clipPath:Ee,filter:Ce,feDropShadow:Me,feMorphology:Ne,feComposite:_e,feColorMatrix:Ae,feGaussianBlur:Ve,title:Re,desc:ke};function Le(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,i)}return r}function De(){return De=a((function*(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=document.createElement("img");return e&&(r.crossOrigin="Anonymous"),new k(((e,i)=>{r.onload=()=>{e(r)},r.onerror=(t,e,r,n,a)=>{i(a)},r.src=t}))})),De.apply(this,arguments)}class Be{constructor(t){var{rootEmSize:e=12,emSize:r=12,createCanvas:i=Be.createCanvas,createImage:n=Be.createImage,anonymousCrossOrigin:a}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.canvg=t,this.definitions={},this.styles={},this.stylesSpecificity={},this.images=[],this.fonts=[],this.emSizeStack=[],this.uniqueId=0,this.screen=t.screen,this.rootEmSize=e,this.emSize=r,this.createCanvas=i,this.createImage=this.bindCreateImage(n,a),this.screen.wait(this.isImagesLoaded.bind(this)),this.screen.wait(this.isFontsLoaded.bind(this))}bindCreateImage(t,e){return"boolean"==typeof e?(r,i)=>t(r,"boolean"==typeof i?i:e):t}get window(){return this.screen.window}get fetch(){return this.screen.fetch}get ctx(){return this.screen.ctx}get emSize(){var{emSizeStack:t}=this;return t[t.length-1]}set emSize(t){var{emSizeStack:e}=this;e.push(t)}popEmSize(){var{emSizeStack:t}=this;t.pop()}getUniqueId(){return"canvg".concat(++this.uniqueId)}isImagesLoaded(){return this.images.every((t=>t.loaded))}isFontsLoaded(){return this.fonts.every((t=>t.loaded))}createDocumentElement(t){var e=this.createElement(t.documentElement);return e.root=!0,e.addStylesFromStyleDefinition(),this.documentElement=e,e}createElement(t){var e=t.nodeName.replace(/^[^:]+:/,""),r=Be.elementTypes[e];return void 0!==r?new r(this,t):new Mt(this,t)}createTextNode(t){return new Ft(this,t)}setViewBox(t){this.screen.setViewBox(function(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Le(Object(r),!0).forEach((function(e){s(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Le(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}({document:this},t))}}function je(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,i)}return r}function ze(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?je(Object(r),!0).forEach((function(e){s(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):je(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}Be.createCanvas=function(t,e){var r=document.createElement("canvas");return r.width=t,r.height=e,r},Be.createImage=function(t){return De.apply(this,arguments)},Be.elementTypes=Ie;class Fe{constructor(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};this.parser=new xt(r),this.screen=new vt(t,r),this.options=r;var i=new Be(this,r),n=i.createDocumentElement(e);this.document=i,this.documentElement=n}static from(t,e){var r=arguments;return a((function*(){var i=r.length>2&&void 0!==r[2]?r[2]:{},n=new xt(i),a=yield n.parse(e);return new Fe(t,a,i)}))()}static fromString(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=new xt(r).parseFromString(e);return new Fe(t,i,r)}fork(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return Fe.from(t,e,ze(ze({},this.options),r))}forkString(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return Fe.fromString(t,e,ze(ze({},this.options),r))}ready(){return this.screen.ready()}isReady(){return this.screen.isReady()}render(){var t=arguments,e=this;return a((function*(){var r=t.length>0&&void 0!==t[0]?t[0]:{};e.start(ze({enableRedraw:!0,ignoreAnimation:!0,ignoreMouse:!0},r)),yield e.ready(),e.stop()}))()}start(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{documentElement:e,screen:r,options:i}=this;r.start(e,ze(ze({enableRedraw:!0},i),t))}stop(){this.screen.stop()}resize(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t,r=arguments.length>2&&void 0!==arguments[2]&&arguments[2];this.documentElement.resize(t,e,r)}}const Ue=Fe}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,